/*
 * Kibo SubscriptionRuntime Service
 * OpenAPI Spec for Kibo SubscriptionRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.subscription.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.subscription.models.CommerceRuntimeShippingRate;
import com.kibocommerce.sdk.subscription.models.Frequency;
import com.kibocommerce.sdk.subscription.models.FulfillmentInfo;
import com.kibocommerce.sdk.subscription.models.InventoryTags;
import com.kibocommerce.sdk.subscription.models.Order;
import com.kibocommerce.sdk.subscription.models.Payment;
import com.kibocommerce.sdk.subscription.models.SubscriptionAction;
import com.kibocommerce.sdk.subscription.models.SubscriptionAdjustment;
import com.kibocommerce.sdk.subscription.models.SubscriptionCoupons;
import com.kibocommerce.sdk.subscription.models.SubscriptionItem;
import com.kibocommerce.sdk.subscription.models.SubscriptionNextOrderDate;
import com.kibocommerce.sdk.subscription.models.SubscriptionReason;
import com.kibocommerce.sdk.subscription.models.SubscriptionReasonCollection;
import com.kibocommerce.sdk.subscription.models.SubscriptionRuntimeSubscription;
import com.kibocommerce.sdk.subscription.models.SubscriptionRuntimeSubscriptionCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscriptionApi
 */
@Disabled
public class SubscriptionApiTest {

    private final SubscriptionApi api = new SubscriptionApi();

    /**
     * Add Subscription Item
     *
     * Add a subscription item in existing subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSubscriptionItemTest() throws ApiException {
        String subscriptionId = null;
        String updateMode = null;
        SubscriptionItem subscriptionItem = null;
        SubscriptionRuntimeSubscription response = api.addSubscriptionItem(subscriptionId, updateMode, subscriptionItem);
        // TODO: test validations
    }

    /**
     * Apply Coupon
     *
     * Apply coupon to the Subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyCouponTest() throws ApiException {
        String subscriptionId = null;
        String couponCode = null;
        String updateMode = null;
        SubscriptionRuntimeSubscription response = api.applyCoupon(subscriptionId, couponCode, updateMode);
        // TODO: test validations
    }

    /**
     * Delete subscription draft
     *
     * Delete subscription draft
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clearSubscriptionDraftTest() throws ApiException {
        String subscriptionId = null;
        SubscriptionRuntimeSubscription response = api.clearSubscriptionDraft(subscriptionId);
        // TODO: test validations
    }

    /**
     * Convert To Order
     *
     * Convert the subscription to order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void convertToOrderTest() throws ApiException {
        String subscriptionId = null;
        Order response = api.convertToOrder(subscriptionId);
        // TODO: test validations
    }

    /**
     * Creates Subscription
     *
     * Creates and validates a new subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubscriptionTest() throws ApiException {
        SubscriptionRuntimeSubscription subscriptionRuntimeSubscription = null;
        SubscriptionRuntimeSubscription response = api.createSubscription(subscriptionRuntimeSubscription);
        // TODO: test validations
    }

    /**
     * Delete Subscription Data
     *
     * Delete Value of the given Key in the SubscriptionData bag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubscriptionDataTest() throws ApiException {
        String subscriptionId = null;
        String subscriptionDataId = null;
        Object response = api.deleteSubscriptionData(subscriptionId, subscriptionDataId);
        // TODO: test validations
    }

    /**
     * Delete Subscription Item
     *
     * Removes a particular subscription item from the subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubscriptionItemTest() throws ApiException {
        String subscriptionId = null;
        String subscriptionItemId = null;
        String updateMode = null;
        SubscriptionReason subscriptionReason = null;
        SubscriptionRuntimeSubscription response = api.deleteSubscriptionItem(subscriptionId, subscriptionItemId, updateMode, subscriptionReason);
        // TODO: test validations
    }

    /**
     * Delete Subscription Item Data
     *
     * Deletes the Value of the given Key in the SubscriptionItem Data bag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubscriptionItemDataTest() throws ApiException {
        String subscriptionId = null;
        String subscriptionItemId = null;
        String subscriptionItemDataId = null;
        Object response = api.deleteSubscriptionItemData(subscriptionId, subscriptionItemId, subscriptionItemDataId);
        // TODO: test validations
    }

    /**
     * Get Available Shipment Methods
     *
     * Gets valid shipping methods for subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableShipmentMethodsTest() throws ApiException {
        String subscriptionId = null;
        Boolean draft = null;
        List<CommerceRuntimeShippingRate> response = api.getAvailableShipmentMethods(subscriptionId, draft);
        // TODO: test validations
    }

    /**
     * Get Reasons
     *
     * Gets available subscription action reasons for the given category. If no category is supplied will give available Cancel action reasons.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReasonsTest() throws ApiException {
        String category = null;
        SubscriptionReasonCollection response = api.getReasons(category);
        // TODO: test validations
    }

    /**
     * Gets Subscription
     *
     * Retrieves the details of a subscription specified by the subscription ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionTest() throws ApiException {
        String subscriptionId = null;
        Boolean draft = null;
        SubscriptionRuntimeSubscription response = api.getSubscription(subscriptionId, draft);
        // TODO: test validations
    }

    /**
     * Get subscription Data
     *
     * Retrieves all the values in the Subscription Data bag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionDataTest() throws ApiException {
        String subscriptionId = null;
        Object response = api.getSubscriptionData(subscriptionId);
        // TODO: test validations
    }

    /**
     * Get Subscription Item Data
     *
     * Retrieves a specific value in the SubscriptionItem Data bag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionItemDataTest() throws ApiException {
        String subscriptionId = null;
        String subscriptionItemId = null;
        Object response = api.getSubscriptionItemData(subscriptionId, subscriptionItemId);
        // TODO: test validations
    }

    /**
     * Get Subscriptions
     *
     * Retrieves a list of subscriptions according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionsTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        String q = null;
        Integer qLimit = null;
        SubscriptionRuntimeSubscriptionCollection response = api.getSubscriptions(startIndex, pageSize, sortBy, filter, q, qLimit);
        // TODO: test validations
    }

    /**
     * Order Now
     *
     * Lets the user place an instant order from the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderNowTest() throws ApiException {
        String subscriptionId = null;
        SubscriptionRuntimeSubscription response = api.orderNow(subscriptionId);
        // TODO: test validations
    }

    /**
     * Order Partial Subscription
     *
     * Lets the user place an order from Partial Draft.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderPartialSubscriptionTest() throws ApiException {
        String subscriptionId = null;
        SubscriptionRuntimeSubscription response = api.orderPartialSubscription(subscriptionId);
        // TODO: test validations
    }

    /**
     * Perform Subscription Action
     *
     * Perform the specified action on subscription. Available actions are Activate, Pause, and Cancel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performSubscriptionActionTest() throws ApiException {
        String subscriptionId = null;
        SubscriptionAction subscriptionAction = null;
        SubscriptionRuntimeSubscription response = api.performSubscriptionAction(subscriptionId, subscriptionAction);
        // TODO: test validations
    }

    /**
     * Remove coupons from subscription and draft
     *
     * Remove coupons from subscription and draft
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCouponTest() throws ApiException {
        String subscriptionId = null;
        String updateMode = null;
        SubscriptionCoupons subscriptionCoupons = null;
        SubscriptionRuntimeSubscription response = api.removeCoupon(subscriptionId, updateMode, subscriptionCoupons);
        // TODO: test validations
    }

    /**
     * Remove one time coupons from subscription
     *
     * Remove one time coupons from subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeOneTimeCouponTest() throws ApiException {
        String subscriptionId = null;
        String updateMode = null;
        SubscriptionCoupons subscriptionCoupons = null;
        SubscriptionRuntimeSubscription response = api.removeOneTimeCoupon(subscriptionId, updateMode, subscriptionCoupons);
        // TODO: test validations
    }

    /**
     * Skip Subscription
     *
     * Skips the next continuity order for the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void skipSubscriptionTest() throws ApiException {
        String subscriptionId = null;
        SubscriptionRuntimeSubscription response = api.skipSubscription(subscriptionId);
        // TODO: test validations
    }

    /**
     * Update Adjustments
     *
     * Update item, shipping and handling adjustments on the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAdjustmentsTest() throws ApiException {
        String subscriptionId = null;
        SubscriptionAdjustment subscriptionAdjustment = null;
        SubscriptionRuntimeSubscription response = api.updateAdjustments(subscriptionId, subscriptionAdjustment);
        // TODO: test validations
    }

    /**
     * Update Fulfillment Info
     *
     * Modifies the Fulfillment Info for a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFulfillmentInfoTest() throws ApiException {
        String subscriptionId = null;
        String updateMode = null;
        FulfillmentInfo fulfillmentInfo = null;
        FulfillmentInfo response = api.updateFulfillmentInfo(subscriptionId, updateMode, fulfillmentInfo);
        // TODO: test validations
    }

    /**
     * Update Item Quantity
     *
     * Update Item Quantity on existing subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemQuantityTest() throws ApiException {
        String subscriptionId = null;
        String subscriptionItemId = null;
        Integer quantity = null;
        String updateMode = null;
        SubscriptionReason subscriptionReason = null;
        SubscriptionRuntimeSubscription response = api.updateItemQuantity(subscriptionId, subscriptionItemId, quantity, updateMode, subscriptionReason);
        // TODO: test validations
    }

    /**
     * Update Next Order Date
     *
     * Updates the next order date on an existing subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNextOrderDateTest() throws ApiException {
        String subscriptionId = null;
        SubscriptionNextOrderDate subscriptionNextOrderDate = null;
        SubscriptionRuntimeSubscription response = api.updateNextOrderDate(subscriptionId, subscriptionNextOrderDate);
        // TODO: test validations
    }

    /**
     * Update Payment
     *
     * Updates the payment on the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentTest() throws ApiException {
        String subscriptionId = null;
        String updateMode = null;
        Payment payment = null;
        SubscriptionRuntimeSubscription response = api.updatePayment(subscriptionId, updateMode, payment);
        // TODO: test validations
    }

    /**
     * Update Subscription
     *
     * Update the info for an existing subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionTest() throws ApiException {
        String subscriptionId = null;
        SubscriptionRuntimeSubscription subscriptionRuntimeSubscription = null;
        SubscriptionRuntimeSubscription response = api.updateSubscription(subscriptionId, subscriptionRuntimeSubscription);
        // TODO: test validations
    }

    /**
     * Update Subscription Data
     *
     * Insert / Updates the Value of the given Key in the Subscription Data bag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionDataTest() throws ApiException {
        String subscriptionId = null;
        String subscriptionDataId = null;
        Object body = null;
        Object response = api.updateSubscriptionData(subscriptionId, subscriptionDataId, body);
        // TODO: test validations
    }

    /**
     * Update Subscription Frequency
     *
     * Update the frequency on an existing subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionFrequencyTest() throws ApiException {
        String subscriptionId = null;
        Frequency frequency = null;
        SubscriptionRuntimeSubscription response = api.updateSubscriptionFrequency(subscriptionId, frequency);
        // TODO: test validations
    }

    /**
     * Update Subscription Item Data
     *
     * Insert / Updates the Value of the given Key in the SubscriptionItem Data bag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionItemDataTest() throws ApiException {
        String subscriptionId = null;
        String subscriptionItemId = null;
        String subscriptionItemDataId = null;
        Object body = null;
        Object response = api.updateSubscriptionItemData(subscriptionId, subscriptionItemId, subscriptionItemDataId, body);
        // TODO: test validations
    }

    /**
     * Upsert Inventory Tags
     *
     * Upsert Inventory Tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertInventoryTagsTest() throws ApiException {
        String subscriptionId = null;
        String subscriptionItemId = null;
        String updateMode = null;
        List<InventoryTags> inventoryTags = null;
        SubscriptionRuntimeSubscription response = api.upsertInventoryTags(subscriptionId, subscriptionItemId, updateMode, inventoryTags);
        // TODO: test validations
    }

}
