/*
 * Kibo Admin User Service
 * OpenAPI Spec for Kibo Admin User Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.adminuser.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.adminuser.models.TenantAdminUserAuthTicket;
import com.kibocommerce.sdk.adminuser.models.UserAuthInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminAuthTicketApi
 */
@Disabled
public class AdminAuthTicketApiTest {

    private final AdminAuthTicketApi api = new AdminAuthTicketApi();

    /**
     * Create User Auth Ticket
     *
     * Authenticates a user for a particular tenant given a set of user credentials adn a tenantId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserAuthTicketTest() throws ApiException {
        Integer tenantId = null;
        UserAuthInfo userAuthInfo = null;
        TenantAdminUserAuthTicket response = api.createUserAuthTicket(tenantId, userAuthInfo);
        // TODO: test validations
    }

    /**
     * Create User Auth Ticket With Ws Fed
     *
     * Create User Auth Ticket With Ws Fed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserAuthTicketWithWsFedTest() throws ApiException {
        String id = null;
        Integer scopeid = null;
        String scopeType = null;
        TenantAdminUserAuthTicket response = api.createUserAuthTicketWithWsFed(id, scopeid, scopeType);
        // TODO: test validations
    }

    /**
     * Delete User Auth Ticket
     *
     * Logs out a user by deleting the refresh token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserAuthTicketTest() throws ApiException {
        String refreshToken = null;
        api.deleteUserAuthTicket(refreshToken);
        // TODO: test validations
    }

    /**
     * Get Ws Fed Challenge Url
     *
     * Get Ws Fed Challenge Url
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWsFedChallengeUrlTest() throws ApiException {
        String id = null;
        Integer scopeid = null;
        String scopeType = null;
        String redirect = null;
        String response = api.getWsFedChallengeUrl(id, scopeid, scopeType, redirect);
        // TODO: test validations
    }

    /**
     * Get Ws Fed Sign Out Url
     *
     * Get Ws Fed Sign Out Url
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWsFedSignOutUrlTest() throws ApiException {
        String id = null;
        String redirect = null;
        String response = api.getWsFedSignOutUrl(id, redirect);
        // TODO: test validations
    }

    /**
     * Refresh Auth Ticket
     *
     * Reauthenticates the current user for a different tenant. If the user does not have access to the tenant, the operation fails.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshAuthTicketTest() throws ApiException {
        Integer tenantId = null;
        TenantAdminUserAuthTicket tenantAdminUserAuthTicket = null;
        TenantAdminUserAuthTicket response = api.refreshAuthTicket(tenantId, tenantAdminUserAuthTicket);
        // TODO: test validations
    }

}
