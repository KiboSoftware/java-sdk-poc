/*
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.customer.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.customer.models.AccountPasswordInfoCollection;
import com.kibocommerce.sdk.customer.models.Card;
import com.kibocommerce.sdk.customer.models.CardCollection;
import com.kibocommerce.sdk.customer.models.ChangePasswordResultCollection;
import com.kibocommerce.sdk.customer.models.ConfirmationInfo;
import com.kibocommerce.sdk.customer.models.CustomerAccount;
import com.kibocommerce.sdk.customer.models.CustomerAccountAndAuthInfo;
import com.kibocommerce.sdk.customer.models.CustomerAccountCollection;
import com.kibocommerce.sdk.customer.models.CustomerAttribute;
import com.kibocommerce.sdk.customer.models.CustomerAttributeCollection;
import com.kibocommerce.sdk.customer.models.CustomerAuditEntryCollection;
import com.kibocommerce.sdk.customer.models.CustomerAuthTicket;
import com.kibocommerce.sdk.customer.models.CustomerContact;
import com.kibocommerce.sdk.customer.models.CustomerContactCollection;
import com.kibocommerce.sdk.customer.models.CustomerLoginInfo;
import com.kibocommerce.sdk.customer.models.CustomerNote;
import com.kibocommerce.sdk.customer.models.CustomerNoteCollection;
import com.kibocommerce.sdk.customer.models.CustomerPasswordInfo;
import com.kibocommerce.sdk.customer.models.CustomerPurchaseOrderAccount;
import com.kibocommerce.sdk.customer.models.CustomerPurchaseOrderAccountCollection;
import com.kibocommerce.sdk.customer.models.CustomerResetPasswordInfo;
import com.kibocommerce.sdk.customer.models.CustomerSegmentCollection;
import com.kibocommerce.sdk.customer.models.LoginState;
import com.kibocommerce.sdk.customer.models.PurchaseOrderTransaction;
import com.kibocommerce.sdk.customer.models.PurchaseOrderTransactionCollection;
import com.kibocommerce.sdk.customer.models.Transaction;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomerAccountApi
 */
@Disabled
public class CustomerAccountApiTest {

    private final CustomerAccountApi api = new CustomerAccountApi();

    /**
     * Add Account
     *
     * Creates a new customer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAccountTest() throws ApiException {
        CustomerAccount customerAccount = null;
        CustomerAccount response = api.addAccount(customerAccount);
        // TODO: test validations
    }

    /**
     * Add Account And Login
     *
     * Adds a customer to the account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAccountAndLoginTest() throws ApiException {
        CustomerAccountAndAuthInfo customerAccountAndAuthInfo = null;
        CustomerAuthTicket response = api.addAccountAndLogin(customerAccountAndAuthInfo);
        // TODO: test validations
    }

    /**
     * Add Account Attribute
     *
     * Adds a new account attribute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAccountAttributeTest() throws ApiException {
        Integer accountId = null;
        String userId = null;
        CustomerAttribute customerAttribute = null;
        CustomerAttribute response = api.addAccountAttribute(accountId, userId, customerAttribute);
        // TODO: test validations
    }

    /**
     * Add Account Card
     *
     * Creates a card on the specific customer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAccountCardTest() throws ApiException {
        Integer accountId = null;
        Card card = null;
        Card response = api.addAccountCard(accountId, card);
        // TODO: test validations
    }

    /**
     * Add Account Contact
     *
     * Creates a new CustomerContact for a customer account, for example, a new shipping address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAccountContactTest() throws ApiException {
        Integer accountId = null;
        CustomerContact customerContact = null;
        CustomerContact response = api.addAccountContact(accountId, customerContact);
        // TODO: test validations
    }

    /**
     * Add Account Contact List
     *
     * Creates a new CustomerContacts for a customer account in bulk to support adding multiple contacts in a multi-ship scenario.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAccountContactListTest() throws ApiException {
        Integer accountId = null;
        List<CustomerContact> customerContact = null;
        CustomerContactCollection response = api.addAccountContactList(accountId, customerContact);
        // TODO: test validations
    }

    /**
     * Add Account Note
     *
     * Adds a new note to the specified customer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAccountNoteTest() throws ApiException {
        Integer accountId = null;
        CustomerNote customerNote = null;
        CustomerNote response = api.addAccountNote(accountId, customerNote);
        // TODO: test validations
    }

    /**
     * Add Accounts
     *
     * Creates multiple new shopper accounts for a specified site. Allows you to create a number of new shopper accounts at one time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAccountsTest() throws ApiException {
        List<CustomerAccountAndAuthInfo> customerAccountAndAuthInfo = null;
        CustomerAccountCollection response = api.addAccounts(customerAccountAndAuthInfo);
        // TODO: test validations
    }

    /**
     * Add Login To Existing Customer
     *
     * Creates a login for an existing customer and logs them in automatically.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addLoginToExistingCustomerTest() throws ApiException {
        Integer accountId = null;
        CustomerLoginInfo customerLoginInfo = null;
        CustomerAuthTicket response = api.addLoginToExistingCustomer(accountId, customerLoginInfo);
        // TODO: test validations
    }

    /**
     * Add Transaction
     *
     * Add a transaction on customer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTransactionTest() throws ApiException {
        Integer accountId = null;
        Transaction transaction = null;
        Transaction response = api.addTransaction(accountId, transaction);
        // TODO: test validations
    }

    /**
     * Change Password
     *
     * Changes a shopper&#39;s password.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        Integer accountId = null;
        Boolean unlockAccount = null;
        String userId = null;
        CustomerPasswordInfo customerPasswordInfo = null;
        api.changePassword(accountId, unlockAccount, userId, customerPasswordInfo);
        // TODO: test validations
    }

    /**
     * Change Passwords
     *
     * Changes a collection of shopper passwords
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changePasswordsTest() throws ApiException {
        AccountPasswordInfoCollection accountPasswordInfoCollection = null;
        ChangePasswordResultCollection response = api.changePasswords(accountPasswordInfoCollection);
        // TODO: test validations
    }

    /**
     * Create Customer Purchase Order Account
     *
     * Creates a customer&#39;s purchase order account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomerPurchaseOrderAccountTest() throws ApiException {
        Integer accountId = null;
        CustomerPurchaseOrderAccount customerPurchaseOrderAccount = null;
        CustomerPurchaseOrderAccount response = api.createCustomerPurchaseOrderAccount(accountId, customerPurchaseOrderAccount);
        // TODO: test validations
    }

    /**
     * Create Purchase Order Transaction
     *
     * Creates a purchase order transaction log (for public api use).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPurchaseOrderTransactionTest() throws ApiException {
        Integer accountId = null;
        PurchaseOrderTransaction purchaseOrderTransaction = null;
        PurchaseOrderTransaction response = api.createPurchaseOrderTransaction(accountId, purchaseOrderTransaction);
        // TODO: test validations
    }

    /**
     * Delete Account
     *
     * Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws ApiException {
        Integer accountId = null;
        api.deleteAccount(accountId);
        // TODO: test validations
    }

    /**
     * Delete Account Attribute
     *
     * Deletes an account attribute specified by attributeFQN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountAttributeTest() throws ApiException {
        Integer accountId = null;
        String attributeFQN = null;
        String userId = null;
        api.deleteAccountAttribute(accountId, attributeFQN, userId);
        // TODO: test validations
    }

    /**
     * Delete Account Card
     *
     * Removes a card from the specified customer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountCardTest() throws ApiException {
        Integer accountId = null;
        String cardId = null;
        api.deleteAccountCard(accountId, cardId);
        // TODO: test validations
    }

    /**
     * Delete Account Contact
     *
     * Deletes a CustomerContact for the specified customer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountContactTest() throws ApiException {
        Integer accountId = null;
        Integer contactId = null;
        api.deleteAccountContact(accountId, contactId);
        // TODO: test validations
    }

    /**
     * Delete Account Note
     *
     * Removes a note from the specified customer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountNoteTest() throws ApiException {
        Integer accountId = null;
        Integer noteId = null;
        api.deleteAccountNote(accountId, noteId);
        // TODO: test validations
    }

    /**
     * Get Account
     *
     * Retrieves the details of a customer account specified by its unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        Integer accountId = null;
        String responseGroups = null;
        String userId = null;
        CustomerAccount response = api.getAccount(accountId, responseGroups, userId);
        // TODO: test validations
    }

    /**
     * Get Account Attribute
     *
     * Retrieves the contents of a particular attribute attached to a specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountAttributeTest() throws ApiException {
        Integer accountId = null;
        String attributeFQN = null;
        String userId = null;
        CustomerAttribute response = api.getAccountAttribute(accountId, attributeFQN, userId);
        // TODO: test validations
    }

    /**
     * Get Account Attributes
     *
     * Retrieves a collection of account attributes according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountAttributesTest() throws ApiException {
        Integer accountId = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        String userId = null;
        CustomerAttributeCollection response = api.getAccountAttributes(accountId, startIndex, pageSize, sortBy, filter, userId);
        // TODO: test validations
    }

    /**
     * Get Account Audit Log
     *
     * Get Account Audit Log
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountAuditLogTest() throws ApiException {
        Integer accountId = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        CustomerAuditEntryCollection response = api.getAccountAuditLog(accountId, startIndex, pageSize, sortBy, filter);
        // TODO: test validations
    }

    /**
     * Get Account Card
     *
     * Retrieves a card for the specified customer account and card ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountCardTest() throws ApiException {
        Integer accountId = null;
        String cardId = null;
        Card response = api.getAccountCard(accountId, cardId);
        // TODO: test validations
    }

    /**
     * Get Account Cards
     *
     * Retrieves a list of cards for the specified customer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountCardsTest() throws ApiException {
        Integer accountId = null;
        CardCollection response = api.getAccountCards(accountId);
        // TODO: test validations
    }

    /**
     * Get Account Contact
     *
     * Retrieves the specified CustomerContact for a customer account, for example, a billing or shipping CustomerContact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountContactTest() throws ApiException {
        Integer accountId = null;
        Integer contactId = null;
        String userId = null;
        CustomerContact response = api.getAccountContact(accountId, contactId, userId);
        // TODO: test validations
    }

    /**
     * Get Account Contacts
     *
     * Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountContactsTest() throws ApiException {
        Integer accountId = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        String userId = null;
        CustomerContactCollection response = api.getAccountContacts(accountId, startIndex, pageSize, sortBy, filter, userId);
        // TODO: test validations
    }

    /**
     * Get Account Note
     *
     * Retrieves the contents of a particular note attached to a specified customer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountNoteTest() throws ApiException {
        Integer accountId = null;
        Integer noteId = null;
        CustomerNote response = api.getAccountNote(accountId, noteId);
        // TODO: test validations
    }

    /**
     * Get Account Notes
     *
     * Retrieves a list of notes added to a customer account according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountNotesTest() throws ApiException {
        Integer accountId = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        CustomerNoteCollection response = api.getAccountNotes(accountId, startIndex, pageSize, sortBy, filter);
        // TODO: test validations
    }

    /**
     * Get Account Segments
     *
     * Retrieves a list of segments for the specified account according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountSegmentsTest() throws ApiException {
        Integer accountId = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        CustomerSegmentCollection response = api.getAccountSegments(accountId, startIndex, pageSize, sortBy, filter);
        // TODO: test validations
    }

    /**
     * Get Accounts
     *
     * Retrieves a list of customer accounts according to any filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountsTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        String fields = null;
        String q = null;
        Integer qLimit = null;
        Boolean isAnonymous = null;
        String responseGroups = null;
        CustomerAccountCollection response = api.getAccounts(startIndex, pageSize, sortBy, filter, fields, q, qLimit, isAnonymous, responseGroups);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a the current logged in customer account
     *
     * Retrieves the details of a the current logged in customer account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentAccountTest() throws ApiException {
        String responseGroups = null;
        CustomerAccount response = api.getCurrentAccount(responseGroups);
        // TODO: test validations
    }

    /**
     * Gets a customer&#39;s purchase order account.
     *
     * Gets a customer&#39;s purchase order account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerPurchaseOrderAccountTest() throws ApiException {
        Integer accountId = null;
        CustomerPurchaseOrderAccount response = api.getCustomerPurchaseOrderAccount(accountId);
        // TODO: test validations
    }

    /**
     * Get Customer Purchase Order Transactions
     *
     * Gets a collection of Purchase order transaction logs associated with a customer account id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerPurchaseOrderTransactionsTest() throws ApiException {
        Integer accountId = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        PurchaseOrderTransactionCollection response = api.getCustomerPurchaseOrderTransactions(accountId, startIndex, pageSize, sortBy, filter);
        // TODO: test validations
    }

    /**
     * Get Customers Purchase Order Accounts
     *
     * Gets a collection of customer purchase order accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomersPurchaseOrderAccountsTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String accountType = null;
        CustomerPurchaseOrderAccountCollection response = api.getCustomersPurchaseOrderAccounts(startIndex, pageSize, sortBy, accountType);
        // TODO: test validations
    }

    /**
     * Get Login State
     *
     * Retrieves the log-in status details of a shopper specified by account Id and user Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoginStateTest() throws ApiException {
        Integer accountId = null;
        String userId = null;
        LoginState response = api.getLoginState(accountId, userId);
        // TODO: test validations
    }

    /**
     * Get Login State By Email Address
     *
     * Retrieves the log-in status details of a shopper specified by emailAdress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoginStateByEmailAddressTest() throws ApiException {
        String emailAddress = null;
        String customerSetCode = null;
        LoginState response = api.getLoginStateByEmailAddress(emailAddress, customerSetCode);
        // TODO: test validations
    }

    /**
     * Get Login State By UserName
     *
     * Retrieves the log-in status details of a shopper specified by userName.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoginStateByUserNameTest() throws ApiException {
        String userName = null;
        String customerSetCode = null;
        LoginState response = api.getLoginStateByUserName(userName, customerSetCode);
        // TODO: test validations
    }

    /**
     * Get Transactions
     *
     * Gets the list of transactions on customer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionsTest() throws ApiException {
        Integer accountId = null;
        List<Transaction> response = api.getTransactions(accountId);
        // TODO: test validations
    }

    /**
     * Recompute Customer Lifetime Value
     *
     * Triggers event to recompute customer lifetime value.  The lifetime value may not immediately be recalculated, but enters a queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recomputeCustomerLifetimeValueTest() throws ApiException {
        Integer accountId = null;
        api.recomputeCustomerLifetimeValue(accountId);
        // TODO: test validations
    }

    /**
     * Remove Transaction
     *
     * Removes a transaction on customer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTransactionTest() throws ApiException {
        Integer accountId = null;
        String transactionId = null;
        api.removeTransaction(accountId, transactionId);
        // TODO: test validations
    }

    /**
     * Reset Password
     *
     * Resets the password for a shopper specified by username or emailAddress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetPasswordTest() throws ApiException {
        CustomerResetPasswordInfo customerResetPasswordInfo = null;
        api.resetPassword(customerResetPasswordInfo);
        // TODO: test validations
    }

    /**
     * Set Login Locked
     *
     * Sets a flag indicating whether the customers login is locked or unlocked.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setLoginLockedTest() throws ApiException {
        Integer accountId = null;
        String userId = null;
        Boolean body = null;
        api.setLoginLocked(accountId, userId, body);
        // TODO: test validations
    }

    /**
     * Set Password Change Required
     *
     * Sets a flag indicating whether the customers must change their password before logging in again.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setPasswordChangeRequiredTest() throws ApiException {
        Integer accountId = null;
        String userId = null;
        Boolean body = null;
        api.setPasswordChangeRequired(accountId, userId, body);
        // TODO: test validations
    }

    /**
     * Update Account
     *
     * Modifies an existing customer account, for example, to change the primary billing contact or change whether to accept marketing material.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountTest() throws ApiException {
        Integer accountId = null;
        CustomerAccount customerAccount = null;
        CustomerAccount response = api.updateAccount(accountId, customerAccount);
        // TODO: test validations
    }

    /**
     * Update Account Attribute
     *
     * Modifies an existing attribute for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountAttributeTest() throws ApiException {
        Integer accountId = null;
        String attributeFQN = null;
        String userId = null;
        CustomerAttribute customerAttribute = null;
        CustomerAttribute response = api.updateAccountAttribute(accountId, attributeFQN, userId, customerAttribute);
        // TODO: test validations
    }

    /**
     * Update Account Card
     *
     * Updates a card on the specific customer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountCardTest() throws ApiException {
        Integer accountId = null;
        String cardId = null;
        Card card = null;
        Card response = api.updateAccountCard(accountId, cardId, card);
        // TODO: test validations
    }

    /**
     * Update Account Contact
     *
     * Updates a CustomerContact for a specified customer account, for example to update addresses or change which CustomerContact is the primary CustomerContact for billing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountContactTest() throws ApiException {
        Integer accountId = null;
        Integer contactId = null;
        String userId = null;
        CustomerContact customerContact = null;
        CustomerContact response = api.updateAccountContact(accountId, contactId, userId, customerContact);
        // TODO: test validations
    }

    /**
     * Update Account Note
     *
     * Modifies an existing note for a customer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountNoteTest() throws ApiException {
        Integer accountId = null;
        Integer noteId = null;
        CustomerNote customerNote = null;
        CustomerNote response = api.updateAccountNote(accountId, noteId, customerNote);
        // TODO: test validations
    }

    /**
     * Update Customer Purchase Order Account
     *
     * Updates a customer&#39;s purchase order account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomerPurchaseOrderAccountTest() throws ApiException {
        Integer accountId = null;
        CustomerPurchaseOrderAccount customerPurchaseOrderAccount = null;
        CustomerPurchaseOrderAccount response = api.updateCustomerPurchaseOrderAccount(accountId, customerPurchaseOrderAccount);
        // TODO: test validations
    }

    /**
     * Update Forgotten Password
     *
     * Updates the password for a shopper who has requested a password change and provided the new password and confirmation code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateForgottenPasswordTest() throws ApiException {
        ConfirmationInfo confirmationInfo = null;
        api.updateForgottenPassword(confirmationInfo);
        // TODO: test validations
    }

}
