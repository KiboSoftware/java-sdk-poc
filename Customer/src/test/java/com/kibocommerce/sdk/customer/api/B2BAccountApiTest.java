/*
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.customer.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.customer.models.B2BAccount;
import com.kibocommerce.sdk.customer.models.B2BAccountCollection;
import com.kibocommerce.sdk.customer.models.B2BAccountHierarchyResult;
import com.kibocommerce.sdk.customer.models.B2BUser;
import com.kibocommerce.sdk.customer.models.B2BUserAndAuthInfo;
import com.kibocommerce.sdk.customer.models.B2BUserCollection;
import com.kibocommerce.sdk.customer.models.CustomerAttribute;
import com.kibocommerce.sdk.customer.models.CustomerAttributeCollection;
import com.kibocommerce.sdk.customer.models.CustomerUserRoleCollection;
import com.kibocommerce.sdk.customer.models.UpgradeToB2BAccountResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for B2BAccountApi
 */
@Disabled
public class B2BAccountApiTest {

    private final B2BAccountApi api = new B2BAccountApi();

    /**
     * Add Account
     *
     * Creates a new B2B account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAccountTest() throws ApiException {
        B2BAccount b2BAccount = null;
        B2BAccount response = api.addAccount(b2BAccount);
        // TODO: test validations
    }

    /**
     * Add B2B Account tAttribute
     *
     * Add a customer attribute to the B2B account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addB2BAccountAttributeTest() throws ApiException {
        Integer accountId = null;
        CustomerAttribute customerAttribute = null;
        CustomerAttribute response = api.addB2BAccountAttribute(accountId, customerAttribute);
        // TODO: test validations
    }

    /**
     * Add Sales Rep To B2B Account
     *
     * Add Sales Rep To B2B Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSalesRepToB2BAccountTest() throws ApiException {
        Integer accountId = null;
        String userId = null;
        B2BAccount response = api.addSalesRepToB2BAccount(accountId, userId);
        // TODO: test validations
    }

    /**
     * Add Sales Reps To B2B Account
     *
     * Adds lists of sales reps to a B2B account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSalesRepsToB2BAccountTest() throws ApiException {
        Integer accountId = null;
        List<String> requestBody = null;
        B2BAccount response = api.addSalesRepsToB2BAccount(accountId, requestBody);
        // TODO: test validations
    }

    /**
     * Add User
     *
     * Adds user to B2B account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserTest() throws ApiException {
        Integer accountId = null;
        B2BUserAndAuthInfo b2BUserAndAuthInfo = null;
        B2BUser response = api.addUser(accountId, b2BUserAndAuthInfo);
        // TODO: test validations
    }

    /**
     * Add User Role Async
     *
     * Add a role to B2B user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserRoleAsyncTest() throws ApiException {
        Integer accountId = null;
        String userId = null;
        Integer roleId = null;
        api.addUserRoleAsync(accountId, userId, roleId);
        // TODO: test validations
    }

    /**
     * Change Parent Account
     *
     * Change the B2B parent account for an existing B2B account that belongs to an account hierarchy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeParentAccountTest() throws ApiException {
        Integer accountId = null;
        Integer parentAccountId = null;
        B2BAccount response = api.changeParentAccount(accountId, parentAccountId);
        // TODO: test validations
    }

    /**
     * Delete B2B Account Attribute
     *
     * Deletes a specific customer attribute specified by attributeFQN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteB2BAccountAttributeTest() throws ApiException {
        Integer accountId = null;
        String attributeFQN = null;
        api.deleteB2BAccountAttribute(accountId, attributeFQN);
        // TODO: test validations
    }

    /**
     * Get Accounts For Sales Rep
     *
     * Gets list of accounts for the B2B sales rep account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountsForSalesRepTest() throws ApiException {
        String userId = null;
        List<Integer> response = api.getAccountsForSalesRep(userId);
        // TODO: test validations
    }

    /**
     * Get B2B Account
     *
     * Retrieves the details of a B2B account specified by its unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getB2BAccountTest() throws ApiException {
        Integer accountId = null;
        String responseGroups = null;
        B2BAccount response = api.getB2BAccount(accountId, responseGroups);
        // TODO: test validations
    }

    /**
     * Get B2B Account Attribute
     *
     * Retrieves the contents of a particular attribute attached to a specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getB2BAccountAttributeTest() throws ApiException {
        Integer accountId = null;
        String attributeFQN = null;
        CustomerAttribute response = api.getB2BAccountAttribute(accountId, attributeFQN);
        // TODO: test validations
    }

    /**
     * Get B2B Account Attributes
     *
     * Retrieves a list of notes added to an account according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getB2BAccountAttributesTest() throws ApiException {
        Integer accountId = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        CustomerAttributeCollection response = api.getB2BAccountAttributes(accountId, startIndex, pageSize, sortBy, filter);
        // TODO: test validations
    }

    /**
     * Get B2B Account Hierarchy
     *
     * Retrieves the account hierarchy for a B2B account specified by its unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getB2BAccountHierarchyTest() throws ApiException {
        Integer accountId = null;
        String responseGroups = null;
        B2BAccountHierarchyResult response = api.getB2BAccountHierarchy(accountId, responseGroups);
        // TODO: test validations
    }

    /**
     * Get B2B Accounts
     *
     * Retrieves a list of B2B accounts according to any filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getB2BAccountsTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        String fields = null;
        String q = null;
        Integer qLimit = null;
        String responseGroups = null;
        B2BAccountCollection response = api.getB2BAccounts(startIndex, pageSize, sortBy, filter, fields, q, qLimit, responseGroups);
        // TODO: test validations
    }

    /**
     * Get User Roles Async
     *
     * Retrieves all the roles for a specified user of a b2b account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserRolesAsyncTest() throws ApiException {
        Integer accountId = null;
        String userId = null;
        CustomerUserRoleCollection response = api.getUserRolesAsync(accountId, userId);
        // TODO: test validations
    }

    /**
     * Get Users Async
     *
     * Retrieves a list of user for a B2B account according to any filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersAsyncTest() throws ApiException {
        Integer accountId = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        String q = null;
        Integer qLimit = null;
        String responseGroups = null;
        B2BUserCollection response = api.getUsersAsync(accountId, startIndex, pageSize, sortBy, filter, q, qLimit, responseGroups);
        // TODO: test validations
    }

    /**
     * Remove Sales Rep From B2B Account
     *
     * Removes a specific sales rep from B2B account .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSalesRepFromB2BAccountTest() throws ApiException {
        Integer accountId = null;
        String userId = null;
        B2BAccount response = api.removeSalesRepFromB2BAccount(accountId, userId);
        // TODO: test validations
    }

    /**
     * Remove User
     *
     * Removes a B2B user from an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserTest() throws ApiException {
        Integer accountId = null;
        String userId = null;
        api.removeUser(accountId, userId);
        // TODO: test validations
    }

    /**
     * Remove User Role Async
     *
     * Removes a role from the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserRoleAsyncTest() throws ApiException {
        Integer accountId = null;
        String userId = null;
        Integer roleId = null;
        api.removeUserRoleAsync(accountId, userId, roleId);
        // TODO: test validations
    }

    /**
     * Update Account
     *
     * Modifies an existing B2B account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountTest() throws ApiException {
        Integer accountId = null;
        B2BAccount b2BAccount = null;
        B2BAccount response = api.updateAccount(accountId, b2BAccount);
        // TODO: test validations
    }

    /**
     * Update B2B Account Attribute
     *
     * Modifies an existing attribute for a b2b account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateB2BAccountAttributeTest() throws ApiException {
        Integer accountId = null;
        String attributeFQN = null;
        CustomerAttribute customerAttribute = null;
        CustomerAttribute response = api.updateB2BAccountAttribute(accountId, attributeFQN, customerAttribute);
        // TODO: test validations
    }

    /**
     * Update B2B Account Status
     *
     * Updates the status on B2B account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateB2BAccountStatusTest() throws ApiException {
        Integer accountId = null;
        String actionName = null;
        B2BAccount response = api.updateB2BAccountStatus(accountId, actionName);
        // TODO: test validations
    }

    /**
     * Update Sales Reps On B2B Account
     *
     * Updates list of  sales reps on a B2B account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSalesRepsOnB2BAccountTest() throws ApiException {
        Integer accountId = null;
        List<String> requestBody = null;
        B2BAccount response = api.updateSalesRepsOnB2BAccount(accountId, requestBody);
        // TODO: test validations
    }

    /**
     * Update User
     *
     * Updates a B2B user specified by user Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        Integer accountId = null;
        String userId = null;
        B2BUser b2BUser = null;
        B2BUser response = api.updateUser(accountId, userId, b2BUser);
        // TODO: test validations
    }

    /**
     * Upgrade B2C Accounts To B2B
     *
     * Upgrades bulk B2C accounts to B2B
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upgradeAccountsToB2BTest() throws ApiException {
        List<Integer> requestBody = null;
        UpgradeToB2BAccountResponse response = api.upgradeAccountsToB2B(requestBody);
        // TODO: test validations
    }

}
