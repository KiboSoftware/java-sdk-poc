/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsProduct;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsProductCollection;
import com.kibocommerce.sdk.catalogadministration.models.ProductCodeRename;
import com.kibocommerce.sdk.catalogadministration.models.ProductInCatalogInfo;
import com.kibocommerce.sdk.catalogadministration.models.ProductTypeChangeRequest;
import com.kibocommerce.sdk.catalogadministration.models.ProductTypeChangeResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Disabled
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    /**
     * Add product
     *
     * Creates a new product. You supply a product name, product code, price and other product characteristics such as its attributes, categories where the product belongs, whether the product has configurable options, stand-alone options, and so on.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProductTest() throws ApiException {
        CatalogAdminsProduct catalogAdminsProduct = null;
        CatalogAdminsProduct response = api.addProduct(catalogAdminsProduct);
        // TODO: test validations
    }

    /**
     * Add product in catalog
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProductInCatalogTest() throws ApiException {
        String productCode = null;
        ProductInCatalogInfo productInCatalogInfo = null;
        ProductInCatalogInfo response = api.addProductInCatalog(productCode, productInCatalogInfo);
        // TODO: test validations
    }

    /**
     * Change product type.
     *
     * Change a product&#39;s product type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeProductTypeTest() throws ApiException {
        String productCode = null;
        ProductTypeChangeRequest productTypeChangeRequest = null;
        ProductTypeChangeResponse response = api.changeProductType(productCode, productTypeChangeRequest);
        // TODO: test validations
    }

    /**
     * Delete product
     *
     * Deletes the product specified by its product code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductTest() throws ApiException {
        String productCode = null;
        api.deleteProduct(productCode);
        // TODO: test validations
    }

    /**
     * Delete product in catalog
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductInCatalogTest() throws ApiException {
        String productCode = null;
        Integer catalogId = null;
        api.deleteProductInCatalog(productCode, catalogId);
        // TODO: test validations
    }

    /**
     * Get product
     *
     * Retrieves details about a product based on the specified response group. For example, to get the BaseProductCode of a product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductTest() throws ApiException {
        String productCode = null;
        String responseGroups = null;
        CatalogAdminsProduct response = api.getProduct(productCode, responseGroups);
        // TODO: test validations
    }

    /**
     * Get product in catalog
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductInCatalogTest() throws ApiException {
        String productCode = null;
        Integer catalogId = null;
        ProductInCatalogInfo response = api.getProductInCatalog(productCode, catalogId);
        // TODO: test validations
    }

    /**
     * Update products in catalog
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductInCatalogsTest() throws ApiException {
        String productCode = null;
        List<ProductInCatalogInfo> response = api.getProductInCatalogs(productCode);
        // TODO: test validations
    }

    /**
     * Get products
     *
     * Retrieves a list of products according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String responseGroups = null;
        String filter = null;
        String q = null;
        Integer qLimit = null;
        Boolean noCount = null;
        CatalogAdminsProductCollection response = api.getProducts(startIndex, pageSize, sortBy, responseGroups, filter, q, qLimit, noCount);
        // TODO: test validations
    }

    /**
     * Rename product codes
     *
     * Action that allows productCodes to be Renamed. Changing the resource identifier of a product could cause problems for established products.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameProductCodesTest() throws ApiException {
        List<ProductCodeRename> productCodeRename = null;
        api.renameProductCodes(productCodeRename);
        // TODO: test validations
    }

    /**
     * Update product
     *
     * Modifies an existing product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductTest() throws ApiException {
        String productCode = null;
        CatalogAdminsProduct catalogAdminsProduct = null;
        CatalogAdminsProduct response = api.updateProduct(productCode, catalogAdminsProduct);
        // TODO: test validations
    }

    /**
     * Update product in catalog
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductInCatalogTest() throws ApiException {
        String productCode = null;
        Integer catalogId = null;
        ProductInCatalogInfo productInCatalogInfo = null;
        ProductInCatalogInfo response = api.updateProductInCatalog(productCode, catalogId, productInCatalogInfo);
        // TODO: test validations
    }

    /**
     * Update products in catalog
     *
     * Use the Products resource to create and manage products for your store. You can create products with options that a shopper configures (such as a T-shirt color and size). The system can manage inventory for all combinations of your product options, and can calculate tax and shipping costs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductInCatalogsTest() throws ApiException {
        String productCode = null;
        List<ProductInCatalogInfo> productInCatalogInfo = null;
        List<ProductInCatalogInfo> response = api.updateProductInCatalogs(productCode, productInCatalogInfo);
        // TODO: test validations
    }

}
