/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.catalogadministration.models.SearchSettings;
import com.kibocommerce.sdk.catalogadministration.models.SearchSettingsCollection;
import com.kibocommerce.sdk.catalogadministration.models.SiteSearchSettings;
import com.kibocommerce.sdk.catalogadministration.models.SpellcheckUpdate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SearchSettingsApi
 */
@Disabled
public class SearchSettingsApiTest {

    private final SearchSettingsApi api = new SearchSettingsApi();

    /**
     * Add search setting
     *
     * Adds the Search Settings for a specific site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSearchSettingTest() throws ApiException {
        Boolean fromSystemDefault = null;
        String copyFromName = null;
        String name = null;
        Boolean makeDefault = null;
        SearchSettings searchSettings = null;
        SearchSettings response = api.addSearchSetting(fromSystemDefault, copyFromName, name, makeDefault, searchSettings);
        // TODO: test validations
    }

    /**
     * Delete search setting
     *
     * Delete the Search Settings for a specific site by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSearchSettingTest() throws ApiException {
        String name = null;
        SearchSettings response = api.deleteSearchSetting(name);
        // TODO: test validations
    }

    /**
     * Delete site search settings
     *
     * Deletes the SiteSearchSettings for a specific SearchSetting by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSiteSearchSettingsTest() throws ApiException {
        String name = null;
        api.deleteSiteSearchSettings(name);
        // TODO: test validations
    }

    /**
     * Get search setting
     *
     * Get site search settings by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSearchSettingTest() throws ApiException {
        String name = null;
        SearchSettings response = api.getSearchSetting(name);
        // TODO: test validations
    }

    /**
     * Get search settings
     *
     * Get site search settings list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSearchSettingsTest() throws ApiException {
        SearchSettingsCollection response = api.getSearchSettings();
        // TODO: test validations
    }

    /**
     * Get site search settings
     *
     * Get SiteSearchSettings for a specific SearchSettings by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSiteSearchSettingsTest() throws ApiException {
        String name = null;
        SiteSearchSettings response = api.getSiteSearchSettings(name);
        // TODO: test validations
    }

    /**
     * Get system default search setting
     *
     * Get the system default search settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSystemDefaultSettingsTest() throws ApiException {
        SearchSettings response = api.getSystemDefaultSettings();
        // TODO: test validations
    }

    /**
     * Update search setting
     *
     * Updates the Search Settings for a specific site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSearchSettingTest() throws ApiException {
        String name = null;
        SearchSettings searchSettings = null;
        SearchSettings response = api.updateSearchSetting(name, searchSettings);
        // TODO: test validations
    }

    /**
     * Update site search settings
     *
     * Updates the SiteSearchSettings for a specific SearchSetting by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSiteSearchSettingsTest() throws ApiException {
        String name = null;
        SiteSearchSettings siteSearchSettings = null;
        SiteSearchSettings response = api.updateSiteSearchSettings(name, siteSearchSettings);
        // TODO: test validations
    }

    /**
     * Update Spellcheck settings
     *
     * Update Spellcheck for SiteSearchSettings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSpellCheckTest() throws ApiException {
        SpellcheckUpdate spellcheckUpdate = null;
        api.updateSpellCheck(spellcheckUpdate);
        // TODO: test validations
    }

}
