/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsCurrencyExchangeRate;
import com.kibocommerce.sdk.catalogadministration.models.CurrencyExchangeRateCollection;
import com.kibocommerce.sdk.catalogadministration.models.CurrencyLocalization;
import com.kibocommerce.sdk.catalogadministration.models.CurrencyLocalizationCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CurrencyApi
 */
@Disabled
public class CurrencyApiTest {

    private final CurrencyApi api = new CurrencyApi();

    /**
     * Update currency localization
     *
     * Updates the details of a currency-localization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCurrencyExchangeRatesTest() throws ApiException {
        String currencyCode = null;
        List<CatalogAdminsCurrencyExchangeRate> catalogAdminsCurrencyExchangeRate = null;
        api.addCurrencyExchangeRates(currencyCode, catalogAdminsCurrencyExchangeRate);
        // TODO: test validations
    }

    /**
     * Add currency localization
     *
     * Adds a new currency localization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCurrencyLocalizationTest() throws ApiException {
        CurrencyLocalization currencyLocalization = null;
        CurrencyLocalization response = api.addCurrencyLocalization(currencyLocalization);
        // TODO: test validations
    }

    /**
     * Delete currency exchange rate
     *
     * Delete a single exchange rate for a specified currency-code and target currency-code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCurrencyExchangeRateTest() throws ApiException {
        String currencyCode = null;
        String toCurrencyCode = null;
        api.deleteCurrencyExchangeRate(currencyCode, toCurrencyCode);
        // TODO: test validations
    }

    /**
     * Delete currency localization
     *
     * Deletes the currency-localization specified by its currency code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCurrencyLocalizationTest() throws ApiException {
        String currencyCode = null;
        api.deleteCurrencyLocalization(currencyCode);
        // TODO: test validations
    }

    /**
     * Get currency exchange rate
     *
     * Retrieves a single exchange rate for a specified currency-code and target-currency-code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrencyExchangeRateTest() throws ApiException {
        String currencyCode = null;
        String toCurrencyCode = null;
        CatalogAdminsCurrencyExchangeRate response = api.getCurrencyExchangeRate(currencyCode, toCurrencyCode);
        // TODO: test validations
    }

    /**
     * Get currency exchange rates
     *
     * Retrieves a list of exchange rates for a specified currency-code and filter criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrencyExchangeRatesTest() throws ApiException {
        String currencyCode = null;
        CurrencyExchangeRateCollection response = api.getCurrencyExchangeRates(currencyCode);
        // TODO: test validations
    }

    /**
     * Get currency localization
     *
     * Gets a single currency-localization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrencyLocalizationTest() throws ApiException {
        String currencyCode = null;
        CurrencyLocalization response = api.getCurrencyLocalization(currencyCode);
        // TODO: test validations
    }

    /**
     * Get currency localizations
     *
     * Gets all currency-localizations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrencyLocalizationsTest() throws ApiException {
        CurrencyLocalizationCollection response = api.getCurrencyLocalizations();
        // TODO: test validations
    }

    /**
     * Update currency exchange rates
     *
     * Update multiple exchange rates for a specified currency-code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCurrencyExchangeRatesTest() throws ApiException {
        String currencyCode = null;
        List<CatalogAdminsCurrencyExchangeRate> catalogAdminsCurrencyExchangeRate = null;
        api.updateCurrencyExchangeRates(currencyCode, catalogAdminsCurrencyExchangeRate);
        // TODO: test validations
    }

    /**
     * Update currency localization
     *
     * Updates the details of a currency-localization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCurrencyLocalizationTest() throws ApiException {
        String currencyCode = null;
        CurrencyLocalization currencyLocalization = null;
        CurrencyLocalization response = api.updateCurrencyLocalization(currencyCode, currencyLocalization);
        // TODO: test validations
    }

}
