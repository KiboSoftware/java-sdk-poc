/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.catalogadministration.models.ProductVariation;
import com.kibocommerce.sdk.catalogadministration.models.ProductVariationCollection;
import com.kibocommerce.sdk.catalogadministration.models.ProductVariationDeltaPrice;
import com.kibocommerce.sdk.catalogadministration.models.ProductVariationFixedPrice;
import com.kibocommerce.sdk.catalogadministration.models.ProductVariationPagedCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductVariationsApi
 */
@Disabled
public class ProductVariationsApiTest {

    private final ProductVariationsApi api = new ProductVariationsApi();

    /**
     * Add product variation localized delta price
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProductVariationLocalizedDeltaPriceTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        ProductVariationDeltaPrice productVariationDeltaPrice = null;
        ProductVariationDeltaPrice response = api.addProductVariationLocalizedDeltaPrice(productCode, variationKey, productVariationDeltaPrice);
        // TODO: test validations
    }

    /**
     * Add product variation localized price
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProductVariationLocalizedPriceTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        ProductVariationFixedPrice productVariationFixedPrice = null;
        ProductVariationFixedPrice response = api.addProductVariationLocalizedPrice(productCode, variationKey, productVariationFixedPrice);
        // TODO: test validations
    }

    /**
     * Delete product variation
     *
     * Deletes an existing product variation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductVariationTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        api.deleteProductVariation(productCode, variationKey);
        // TODO: test validations
    }

    /**
     * Delete product variation localized delta price
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductVariationLocalizedDeltaPriceTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        String currencyCode = null;
        api.deleteProductVariationLocalizedDeltaPrice(productCode, variationKey, currencyCode);
        // TODO: test validations
    }

    /**
     * Delete product variation localized price
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductVariationLocalizedPriceTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        String currencyCode = null;
        api.deleteProductVariationLocalizedPrice(productCode, variationKey, currencyCode);
        // TODO: test validations
    }

    /**
     * Get product variation
     *
     * Retrieves an existing product variation for a specific product and variation key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductVariationTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        ProductVariation response = api.getProductVariation(productCode, variationKey);
        // TODO: test validations
    }

    /**
     * Get product variation localized delta price
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductVariationLocalizedDeltaPriceTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        String currencyCode = null;
        ProductVariationDeltaPrice response = api.getProductVariationLocalizedDeltaPrice(productCode, variationKey, currencyCode);
        // TODO: test validations
    }

    /**
     * Get product variation localized delta prices
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductVariationLocalizedDeltaPricesTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        List<ProductVariationDeltaPrice> response = api.getProductVariationLocalizedDeltaPrices(productCode, variationKey);
        // TODO: test validations
    }

    /**
     * Get product variation localized price
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductVariationLocalizedPriceTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        String currencyCode = null;
        ProductVariationFixedPrice response = api.getProductVariationLocalizedPrice(productCode, variationKey, currencyCode);
        // TODO: test validations
    }

    /**
     * Get product variation localized prices
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductVariationLocalizedPricesTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        List<ProductVariationFixedPrice> response = api.getProductVariationLocalizedPrices(productCode, variationKey);
        // TODO: test validations
    }

    /**
     * Get product variations
     *
     * Retrieves a paged list of product variations for a specific product according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductVariationsTest() throws ApiException {
        String productCode = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        ProductVariationPagedCollection response = api.getProductVariations(productCode, startIndex, pageSize, sortBy, filter);
        // TODO: test validations
    }

    /**
     * Update product variation
     *
     * Modifies an existing product variation specified by its variation key. Typically used to change the price or               inventory count of an existing product variation. Read-only options are ignored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductVariationTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        ProductVariation productVariation = null;
        ProductVariation response = api.updateProductVariation(productCode, variationKey, productVariation);
        // TODO: test validations
    }

    /**
     * Update product variation localized delta price
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductVariationLocalizedDeltaPriceTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        String currencyCode = null;
        ProductVariationDeltaPrice productVariationDeltaPrice = null;
        ProductVariationDeltaPrice response = api.updateProductVariationLocalizedDeltaPrice(productCode, variationKey, currencyCode, productVariationDeltaPrice);
        // TODO: test validations
    }

    /**
     * Update product variation localized delta prices
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductVariationLocalizedDeltaPricesTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        List<ProductVariationDeltaPrice> productVariationDeltaPrice = null;
        List<ProductVariationDeltaPrice> response = api.updateProductVariationLocalizedDeltaPrices(productCode, variationKey, productVariationDeltaPrice);
        // TODO: test validations
    }

    /**
     * Update product variation localized price
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductVariationLocalizedPriceTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        String currencyCode = null;
        ProductVariationFixedPrice productVariationFixedPrice = null;
        ProductVariationFixedPrice response = api.updateProductVariationLocalizedPrice(productCode, variationKey, currencyCode, productVariationFixedPrice);
        // TODO: test validations
    }

    /**
     * Update product variation localized prices
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductVariationLocalizedPricesTest() throws ApiException {
        String productCode = null;
        String variationKey = null;
        List<ProductVariationFixedPrice> productVariationFixedPrice = null;
        List<ProductVariationFixedPrice> response = api.updateProductVariationLocalizedPrices(productCode, variationKey, productVariationFixedPrice);
        // TODO: test validations
    }

    /**
     * Update product variations
     *
     * Modifies multiple product variations for an existing product in one operation. Use to set IsActive to true for               variations that represent configurable options for sale. Also use to change the price or inventory count of an               existing product variation. Read-only options are ignored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductVariationsTest() throws ApiException {
        String productCode = null;
        ProductVariationCollection productVariationCollection = null;
        ProductVariationCollection response = api.updateProductVariations(productCode, productVariationCollection);
        // TODO: test validations
    }

}
