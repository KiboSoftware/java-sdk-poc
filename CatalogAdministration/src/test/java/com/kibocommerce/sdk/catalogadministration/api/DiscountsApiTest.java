/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsDiscount;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsDiscountTarget;
import com.kibocommerce.sdk.catalogadministration.models.DiscountCollection;
import com.kibocommerce.sdk.catalogadministration.models.DiscountLocalizedContent;
import com.kibocommerce.sdk.catalogadministration.models.DiscountTag;
import com.kibocommerce.sdk.catalogadministration.models.DiscountTagCollection;
import com.kibocommerce.sdk.catalogadministration.models.TagCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DiscountsApi
 */
@Disabled
public class DiscountsApiTest {

    private final DiscountsApi api = new DiscountsApi();

    /**
     * Create discount
     *
     * Creates a discount.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDiscountTest() throws ApiException {
        String tagCode = null;
        CatalogAdminsDiscount catalogAdminsDiscount = null;
        CatalogAdminsDiscount response = api.createDiscount(tagCode, catalogAdminsDiscount);
        // TODO: test validations
    }

    /**
     * Delete discount
     *
     * Deletes a discount specified by its discount ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDiscountTest() throws ApiException {
        Integer discountId = null;
        api.deleteDiscount(discountId);
        // TODO: test validations
    }

    /**
     * Generate a random coupon
     *
     * Generates a random code for a coupon.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateRandomCouponTest() throws ApiException {
        String response = api.generateRandomCoupon();
        // TODO: test validations
    }

    /**
     * Get discount
     *
     * Retrieves the details of a single discount.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiscountTest() throws ApiException {
        Integer discountId = null;
        CatalogAdminsDiscount response = api.getDiscount(discountId);
        // TODO: test validations
    }

    /**
     * Get discount content
     *
     * Retrieves the localized content specified for the specified discount.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiscountContentTest() throws ApiException {
        Integer discountId = null;
        DiscountLocalizedContent response = api.getDiscountContent(discountId);
        // TODO: test validations
    }

    /**
     * Get discount target
     *
     * Retrieves the discount target, that is which products, categories, or shipping methods are eligible for the discount.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiscountTargetTest() throws ApiException {
        Integer discountId = null;
        CatalogAdminsDiscountTarget response = api.getDiscountTarget(discountId);
        // TODO: test validations
    }

    /**
     * Get discounts
     *
     * Retrieves a list of discounts according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiscountsTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        String responseGroups = null;
        DiscountCollection response = api.getDiscounts(startIndex, pageSize, sortBy, filter, responseGroups);
        // TODO: test validations
    }

    /**
     * Get tags for a discount
     *
     * Retrieves all tags associated to a discount
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsTest() throws ApiException {
        Integer discountId = null;
        TagCollection response = api.getTags(discountId);
        // TODO: test validations
    }

    /**
     * Update discount
     *
     * Modifies a discount.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDiscountTest() throws ApiException {
        Integer discountId = null;
        CatalogAdminsDiscount catalogAdminsDiscount = null;
        CatalogAdminsDiscount response = api.updateDiscount(discountId, catalogAdminsDiscount);
        // TODO: test validations
    }

    /**
     * Update discount content
     *
     * Modifies the localized content for the specified discount. Allows you to rename the discount without modifying any other discount properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDiscountContentTest() throws ApiException {
        Integer discountId = null;
        DiscountLocalizedContent discountLocalizedContent = null;
        DiscountLocalizedContent response = api.updateDiscountContent(discountId, discountLocalizedContent);
        // TODO: test validations
    }

    /**
     * Update discount tags
     *
     * Modifies tags of the discount. The original tags are overwritten.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDiscountTagsTest() throws ApiException {
        List<DiscountTag> discountTag = null;
        DiscountTagCollection response = api.updateDiscountTags(discountTag);
        // TODO: test validations
    }

    /**
     * Update discount target
     *
     * Modifies properties of the discount target, for example, the dollar amount, or precentage off the price.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDiscountTargetTest() throws ApiException {
        Integer discountId = null;
        CatalogAdminsDiscountTarget catalogAdminsDiscountTarget = null;
        CatalogAdminsDiscountTarget response = api.updateDiscountTarget(discountId, catalogAdminsDiscountTarget);
        // TODO: test validations
    }

}
