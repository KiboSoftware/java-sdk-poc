/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsCategory;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsCategoryAttribute;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsCategoryCollection;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsCategoryPagedCollection;
import com.kibocommerce.sdk.catalogadministration.models.CategoryAttributeCollection;
import com.kibocommerce.sdk.catalogadministration.models.DynamicExpression;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CategoriesApi
 */
@Disabled
public class CategoriesApiTest {

    private final CategoriesApi api = new CategoriesApi();

    /**
     * Add category
     *
     * dds a new category to the catalog&#39;s category hierarchy. Specify a ParentCategoryID to determine where to locate the category in the hierarchy; if not specified it becomes a top-level category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCategoryTest() throws ApiException {
        Boolean incrementSequence = null;
        Boolean useProvidedId = null;
        CatalogAdminsCategory catalogAdminsCategory = null;
        CatalogAdminsCategory response = api.addCategory(incrementSequence, useProvidedId, catalogAdminsCategory);
        // TODO: test validations
    }

    /**
     * Add category attribute
     *
     * Adds a new category attribute to the category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCategoryAttributeTest() throws ApiException {
        Integer categoryId = null;
        CatalogAdminsCategoryAttribute catalogAdminsCategoryAttribute = null;
        CatalogAdminsCategoryAttribute response = api.addCategoryAttribute(categoryId, catalogAdminsCategoryAttribute);
        // TODO: test validations
    }

    /**
     * Add products to category
     *
     * Adds the products in the provided product code list to the specified category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProductsToCategoryTest() throws ApiException {
        Integer categoryId = null;
        List<String> requestBody = null;
        api.addProductsToCategory(categoryId, requestBody);
        // TODO: test validations
    }

    /**
     * Delete category attribute
     *
     * Deletes the category attribute specified by its attributeFQN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCategoryAttributeTest() throws ApiException {
        Integer categoryId = null;
        String attributeFQN = null;
        api.deleteCategoryAttribute(categoryId, attributeFQN);
        // TODO: test validations
    }

    /**
     * Delete category
     *
     * Deletes the category specified by its category ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCategoryByIdTest() throws ApiException {
        Integer categoryId = null;
        Boolean cascadeDelete = null;
        Boolean forceDelete = null;
        Boolean reassignToParent = null;
        api.deleteCategoryById(categoryId, cascadeDelete, forceDelete, reassignToParent);
        // TODO: test validations
    }

    /**
     * Get categories
     *
     * Retrieves a list of categories according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCategoriesTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        Boolean includeAttributes = null;
        String responseGroups = null;
        CatalogAdminsCategoryPagedCollection response = api.getCategories(startIndex, pageSize, sortBy, filter, includeAttributes, responseGroups);
        // TODO: test validations
    }

    /**
     * Get category
     *
     * Retrieves the details of a single category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCategoryTest() throws ApiException {
        Integer categoryId = null;
        Boolean includeAttributes = null;
        CatalogAdminsCategory response = api.getCategory(categoryId, includeAttributes);
        // TODO: test validations
    }

    /**
     * Get category attribute
     *
     * Retrieves the details of a single category attribute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCategoryAttributeTest() throws ApiException {
        Integer categoryId = null;
        String attributeFQN = null;
        CatalogAdminsCategoryAttribute response = api.getCategoryAttribute(categoryId, attributeFQN);
        // TODO: test validations
    }

    /**
     * Get category attributes
     *
     * Retrieves a list of category attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCategoryAttributesTest() throws ApiException {
        Integer categoryId = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        CategoryAttributeCollection response = api.getCategoryAttributes(categoryId, startIndex, pageSize, sortBy, filter);
        // TODO: test validations
    }

    /**
     * Get child categories
     *
     * Retrieves the immediate subcategories of a category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChildCategoriesTest() throws ApiException {
        Integer categoryId = null;
        CatalogAdminsCategoryCollection response = api.getChildCategories(categoryId);
        // TODO: test validations
    }

    /**
     * Remove products from category
     *
     * Removes the products in the provided product code list from the specified category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeProductsFromCategoryTest() throws ApiException {
        Integer categoryId = null;
        List<String> requestBody = null;
        api.removeProductsFromCategory(categoryId, requestBody);
        // TODO: test validations
    }

    /**
     * Update category
     *
     * Modifies a category such as moving it to another location in the category tree, or changing          whether it is visible on the storefront. This PUT replaces the existing resource, so be sure          to include all the information that you want to maintain for the category. Any unspecified          properties are set to null.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCategoryTest() throws ApiException {
        Integer categoryId = null;
        Boolean cascadeVisibility = null;
        CatalogAdminsCategory catalogAdminsCategory = null;
        CatalogAdminsCategory response = api.updateCategory(categoryId, cascadeVisibility, catalogAdminsCategory);
        // TODO: test validations
    }

    /**
     * Update category attribute
     *
     * Modifies the category attribute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCategoryAttributeTest() throws ApiException {
        Integer categoryId = null;
        String attributeFQN = null;
        CatalogAdminsCategoryAttribute catalogAdminsCategoryAttribute = null;
        CatalogAdminsCategoryAttribute response = api.updateCategoryAttribute(categoryId, attributeFQN, catalogAdminsCategoryAttribute);
        // TODO: test validations
    }

    /**
     * Validate dynamic category expression
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateDynamicExpressionTest() throws ApiException {
        DynamicExpression dynamicExpression = null;
        DynamicExpression response = api.validateDynamicExpression(dynamicExpression);
        // TODO: test validations
    }

    /**
     * Validate realtime dynamic category expression
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateRealTimeDynamicExpressionTest() throws ApiException {
        DynamicExpression dynamicExpression = null;
        DynamicExpression response = api.validateRealTimeDynamicExpression(dynamicExpression);
        // TODO: test validations
    }

}
