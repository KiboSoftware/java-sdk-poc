/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.catalogadministration.models.AttributeInProductType;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsProductOption;
import com.kibocommerce.sdk.catalogadministration.models.ProductType;
import com.kibocommerce.sdk.catalogadministration.models.ProductTypeCollection;
import com.kibocommerce.sdk.catalogadministration.models.ProductVariationPagedCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductTypesApi
 */
@Disabled
public class ProductTypesApiTest {

    private final ProductTypesApi api = new ProductTypesApi();

    /**
     * Add extra
     *
     * Add extra.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addExtraTest() throws ApiException {
        Integer productTypeId = null;
        AttributeInProductType attributeInProductType = null;
        AttributeInProductType response = api.addExtra(productTypeId, attributeInProductType);
        // TODO: test validations
    }

    /**
     * Add option
     *
     * Add option.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOptionTest() throws ApiException {
        Integer productTypeId = null;
        AttributeInProductType attributeInProductType = null;
        AttributeInProductType response = api.addOption(productTypeId, attributeInProductType);
        // TODO: test validations
    }

    /**
     * Add product type
     *
     * Get product type by Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProductTypeTest() throws ApiException {
        ProductType productType = null;
        ProductType response = api.addProductType(productType);
        // TODO: test validations
    }

    /**
     * Add product type property
     *
     * Add property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPropertyTest() throws ApiException {
        Integer productTypeId = null;
        AttributeInProductType attributeInProductType = null;
        AttributeInProductType response = api.addProperty(productTypeId, attributeInProductType);
        // TODO: test validations
    }

    /**
     * Add variant property
     *
     * Add variant property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addVariantPropertyTest() throws ApiException {
        Integer productTypeId = null;
        AttributeInProductType attributeInProductType = null;
        AttributeInProductType response = api.addVariantProperty(productTypeId, attributeInProductType);
        // TODO: test validations
    }

    /**
     * Delete extra
     *
     * Delete extra.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExtraTest() throws ApiException {
        Integer productTypeId = null;
        String attributeFQN = null;
        api.deleteExtra(productTypeId, attributeFQN);
        // TODO: test validations
    }

    /**
     * Delete option
     *
     * Delete option.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOptionTest() throws ApiException {
        Integer productTypeId = null;
        String attributeFQN = null;
        api.deleteOption(productTypeId, attributeFQN);
        // TODO: test validations
    }

    /**
     * Delete product type
     *
     * Delete product type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductTypeTest() throws ApiException {
        Integer productTypeId = null;
        api.deleteProductType(productTypeId);
        // TODO: test validations
    }

    /**
     * Delete product type property
     *
     * Delete property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePropertyTest() throws ApiException {
        Integer productTypeId = null;
        String attributeFQN = null;
        api.deleteProperty(productTypeId, attributeFQN);
        // TODO: test validations
    }

    /**
     * Delete variant property
     *
     * Delete variant property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVariantPropertyTest() throws ApiException {
        Integer productTypeId = null;
        String attributeFQN = null;
        api.deleteVariantProperty(productTypeId, attributeFQN);
        // TODO: test validations
    }

    /**
     * Generate product variations
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateProductVariationsTest() throws ApiException {
        Integer productTypeId = null;
        String productCode = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        List<CatalogAdminsProductOption> catalogAdminsProductOption = null;
        ProductVariationPagedCollection response = api.generateProductVariations(productTypeId, productCode, startIndex, pageSize, sortBy, filter, catalogAdminsProductOption);
        // TODO: test validations
    }

    /**
     * Get extra
     *
     * Get extra.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtraTest() throws ApiException {
        Integer productTypeId = null;
        String attributeFQN = null;
        AttributeInProductType response = api.getExtra(productTypeId, attributeFQN);
        // TODO: test validations
    }

    /**
     * Get extras
     *
     * Get extras.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtrasTest() throws ApiException {
        Integer productTypeId = null;
        List<AttributeInProductType> response = api.getExtras(productTypeId);
        // TODO: test validations
    }

    /**
     * Get option
     *
     * Get individual option.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOptionTest() throws ApiException {
        Integer productTypeId = null;
        String attributeFQN = null;
        AttributeInProductType response = api.getOption(productTypeId, attributeFQN);
        // TODO: test validations
    }

    /**
     * Get options
     *
     * Get options for the product type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOptionsTest() throws ApiException {
        Integer productTypeId = null;
        List<AttributeInProductType> response = api.getOptions(productTypeId);
        // TODO: test validations
    }

    /**
     * Get product type
     *
     * Get product type by Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductTypeTest() throws ApiException {
        Integer productTypeId = null;
        ProductType response = api.getProductType(productTypeId);
        // TODO: test validations
    }

    /**
     * Get product types
     *
     * Retrieves a list of product types according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductTypesTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        String responseGroups = null;
        ProductTypeCollection response = api.getProductTypes(startIndex, pageSize, sortBy, filter, responseGroups);
        // TODO: test validations
    }

    /**
     * Get product type properties
     *
     * Get properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPropertiesTest() throws ApiException {
        Integer productTypeId = null;
        List<AttributeInProductType> response = api.getProperties(productTypeId);
        // TODO: test validations
    }

    /**
     * Get product type property
     *
     * Get property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPropertyTest() throws ApiException {
        Integer productTypeId = null;
        String attributeFQN = null;
        AttributeInProductType response = api.getProperty(productTypeId, attributeFQN);
        // TODO: test validations
    }

    /**
     * Get variant properties
     *
     * Get variant properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVariantPropertiesTest() throws ApiException {
        Integer productTypeId = null;
        List<AttributeInProductType> response = api.getVariantProperties(productTypeId);
        // TODO: test validations
    }

    /**
     * Get variant property
     *
     * Get variant property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVariantPropertyTest() throws ApiException {
        Integer productTypeId = null;
        String attributeFQN = null;
        AttributeInProductType response = api.getVariantProperty(productTypeId, attributeFQN);
        // TODO: test validations
    }

    /**
     * Update extra
     *
     * Update extra.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExtraTest() throws ApiException {
        Integer productTypeId = null;
        String attributeFQN = null;
        AttributeInProductType attributeInProductType = null;
        AttributeInProductType response = api.updateExtra(productTypeId, attributeFQN, attributeInProductType);
        // TODO: test validations
    }

    /**
     * Update option
     *
     * Update option.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOptionTest() throws ApiException {
        Integer productTypeId = null;
        String attributeFQN = null;
        AttributeInProductType attributeInProductType = null;
        AttributeInProductType response = api.updateOption(productTypeId, attributeFQN, attributeInProductType);
        // TODO: test validations
    }

    /**
     * Update product type
     *
     * Update product type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductTypeTest() throws ApiException {
        Integer productTypeId = null;
        ProductType productType = null;
        ProductType response = api.updateProductType(productTypeId, productType);
        // TODO: test validations
    }

    /**
     * Update product type property
     *
     * Update property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePropertyTest() throws ApiException {
        Integer productTypeId = null;
        String attributeFQN = null;
        AttributeInProductType attributeInProductType = null;
        AttributeInProductType response = api.updateProperty(productTypeId, attributeFQN, attributeInProductType);
        // TODO: test validations
    }

    /**
     * Update variant property
     *
     * Update variant property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVariantPropertyTest() throws ApiException {
        Integer productTypeId = null;
        String attributeFQN = null;
        AttributeInProductType attributeInProductType = null;
        AttributeInProductType response = api.updateVariantProperty(productTypeId, attributeFQN, attributeInProductType);
        // TODO: test validations
    }

}
