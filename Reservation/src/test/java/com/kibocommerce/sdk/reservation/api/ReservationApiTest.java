/*
 * Kibo Reservation Web API
 * OpenAPI Spec for Kibo Reservation Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.reservation.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.reservation.models.OrderReservati;
import com.kibocommerce.sdk.reservation.models.Reservati;
import com.kibocommerce.sdk.reservation.models.ReservationCollecti;
import com.kibocommerce.sdk.reservation.models.ReservationItem;
import com.kibocommerce.sdk.reservation.models.ReservationWebAPIOrderAttribute;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReservationApi
 */
@Disabled
public class ReservationApiTest {

    private final ReservationApi api = new ReservationApi();

    /**
     * Activate Reservation
     *
     * Activate Reservation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateReservationTest() throws ApiException {
        String reservationId = null;
        Reservati response = api.activateReservation(reservationId);
        // TODO: test validations
    }

    /**
     * Add Item
     *
     * Add Item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addItemTest() throws ApiException {
        String reservationId = null;
        String zipCode = null;
        ReservationItem reservationItem = null;
        Reservati response = api.addItem(reservationId, zipCode, reservationItem);
        // TODO: test validations
    }

    /**
     * Close Reservation
     *
     * Close Reservation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void closeReservationTest() throws ApiException {
        String reservationId = null;
        Reservati response = api.closeReservation(reservationId);
        // TODO: test validations
    }

    /**
     * Convert To Order Reservation
     *
     * Convert To Order Reservation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void convertToOrderReservationTest() throws ApiException {
        String reservationId = null;
        OrderReservati orderReservati = null;
        Reservati response = api.convertToOrderReservation(reservationId, orderReservati);
        // TODO: test validations
    }

    /**
     * Create Reservation
     *
     * Create Reservation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReservationTest() throws ApiException {
        Reservati reservati = null;
        Reservati response = api.createReservation(reservati);
        // TODO: test validations
    }

    /**
     * Delete Reservation
     *
     * Delete Reservation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReservationTest() throws ApiException {
        String reservationId = null;
        api.deleteReservation(reservationId);
        // TODO: test validations
    }

    /**
     * Get Allocation Status
     *
     * Get Allocation Status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllocationStatusTest() throws ApiException {
        String reservationId = null;
        Map<String, String> response = api.getAllocationStatus(reservationId);
        // TODO: test validations
    }

    /**
     * Get Reservation By Id
     *
     * Get Reservation By Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReservationByIdTest() throws ApiException {
        String reservationId = null;
        Reservati response = api.getReservationById(reservationId);
        // TODO: test validations
    }

    /**
     * Get Reservations
     *
     * Get Reservations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReservationsTest() throws ApiException {
        Reservati response = api.getReservations();
        // TODO: test validations
    }

    /**
     * Get Reservations By Cart Id
     *
     * Get Reservations By Cart Id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReservationsByCartIdTest() throws ApiException {
        String cartId = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        String q = null;
        Integer qLimit = null;
        ReservationCollecti response = api.getReservationsByCartId(cartId, startIndex, pageSize, sortBy, filter, q, qLimit);
        // TODO: test validations
    }

    /**
     * Remove Item
     *
     * Remove Item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeItemTest() throws ApiException {
        String reservationId = null;
        String reservationItemId = null;
        Reservati response = api.removeItem(reservationId, reservationItemId);
        // TODO: test validations
    }

    /**
     * Update Item Quantity
     *
     * Update Item Quantity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemQuantityTest() throws ApiException {
        String reservationId = null;
        String reservationItemId = null;
        Integer quantity = null;
        Reservati response = api.updateItemQuantity(reservationId, reservationItemId, quantity);
        // TODO: test validations
    }

    /**
     * Update Reservation
     *
     * Update Reservation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReservationTest() throws ApiException {
        String reservationId = null;
        Reservati reservati = null;
        Reservati response = api.updateReservation(reservationId, reservati);
        // TODO: test validations
    }

    /**
     * Update Reservation Item
     *
     * Update Reservation Item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReservationItemTest() throws ApiException {
        String reservationId = null;
        String reservationItemId = null;
        String zipCode = null;
        ReservationItem reservationItem = null;
        Reservati response = api.updateReservationItem(reservationId, reservationItemId, zipCode, reservationItem);
        // TODO: test validations
    }

    /**
     * Update Timer
     *
     * Update Timer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTimerTest() throws ApiException {
        String reservationId = null;
        Reservati response = api.updateTimer(reservationId);
        // TODO: test validations
    }

    /**
     * Update Zip Code
     *
     * Update Zip Code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateZipCodeTest() throws ApiException {
        String reservationId = null;
        String zipCode = null;
        List<ReservationWebAPIOrderAttribute> reservationWebAPIOrderAttribute = null;
        Reservati response = api.updateZipCode(reservationId, zipCode, reservationWebAPIOrderAttribute);
        // TODO: test validations
    }

}
