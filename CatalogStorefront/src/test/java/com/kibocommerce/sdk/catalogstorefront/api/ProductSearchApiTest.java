/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.catalogstorefront.models.ProductSearchRandomAccessCursor;
import com.kibocommerce.sdk.catalogstorefront.models.ProductSearchResult;
import com.kibocommerce.sdk.catalogstorefront.models.RequestFilter;
import com.kibocommerce.sdk.catalogstorefront.models.SearchSuggestionResult;
import com.kibocommerce.sdk.catalogstorefront.models.VisualSearchResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductSearchApi
 */
@Disabled
public class ProductSearchApiTest {

    private final ProductSearchApi api = new ProductSearchApi();

    /**
     * Searches the items displayed on the storefront. Used for debugging explain plans from solr
     *
     * Searches the items displayed on the storefront for products or product options that the shopper types in a search query. Used for debugging explain plans from solr
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchDebugTest() throws ApiException {
        String query = null;
        String filter = null;
        String facetTemplate = null;
        String facetTemplateSubset = null;
        String facet = null;
        String facetFieldRangeQuery = null;
        String facetHierPrefix = null;
        String facetHierValue = null;
        String facetHierDepth = null;
        String facetStartIndex = null;
        String facetPageSize = null;
        String facetSettings = null;
        String facetValueFilter = null;
        String sortBy = null;
        Boolean sliceSearchResults = null;
        Integer pageSize = null;
        Integer startIndex = null;
        String searchSettings = null;
        Boolean enableSearchTuningRules = null;
        String searchTuningRuleContext = null;
        String searchTuningRuleCode = null;
        String responseGroups = null;
        String facetTemplateExclude = null;
        String facetPrefix = null;
        String responseOptions = null;
        String cursorMark = null;
        String facetValueSort = null;
        Boolean returnUrl = null;
        String mid = null;
        Boolean omitNamespace = null;
        String campaignId = null;
        String merchandizingRuleCode = null;
        String responseFields = null;
        Integer rows = null;
        Integer start = null;
        String q = null;
        api.searchDebug(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, sliceSearchResults, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, returnUrl, mid, omitNamespace, campaignId, merchandizingRuleCode, responseFields, rows, start, q);
        // TODO: test validations
    }

    /**
     * Gets list of cursors for search results
     *
     * Generate a list of cursors that then allows you to retrieve all products with efficient deep paging.     Optionally provide a query and/or filter to generate a cursor for a subset of products.     After retrieving the cursor, provide a cursorMark to the cursorMark argument of the /search or /getProducts operations.     You may provide cursorMarks in any order or even in parallel operations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontGetRandomAccessCursorTest() throws ApiException {
        String query = null;
        String filter = null;
        Integer pageSize = null;
        ProductSearchRandomAccessCursor response = api.storefrontGetRandomAccessCursor(query, filter, pageSize);
        // TODO: test validations
    }

    /**
     * Search for products.
     *
     * Searches the categories displayed on the storefront for products or product options that the shopper types in a search query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontSearchTest() throws ApiException {
        String query = null;
        String filter = null;
        String facetTemplate = null;
        String facetTemplateSubset = null;
        String facet = null;
        String facetFieldRangeQuery = null;
        String facetHierPrefix = null;
        String facetHierValue = null;
        String facetHierDepth = null;
        String facetStartIndex = null;
        String facetPageSize = null;
        String facetSettings = null;
        String facetValueFilter = null;
        String sortBy = null;
        Integer pageSize = null;
        Integer startIndex = null;
        String searchSettings = null;
        Boolean enableSearchTuningRules = null;
        String searchTuningRuleContext = null;
        String searchTuningRuleCode = null;
        String responseGroups = null;
        String facetTemplateExclude = null;
        String facetPrefix = null;
        String responseOptions = null;
        String cursorMark = null;
        String facetValueSort = null;
        String defaultSort = null;
        Boolean shouldSlice = null;
        String mid = null;
        Boolean omitNamespace = null;
        Boolean includeAllImages = null;
        String spellcorrectOverride = null;
        Boolean useSubscriptionPricing = null;
        String merchandizingRuleCode = null;
        ProductSearchResult response = api.storefrontSearch(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, defaultSort, shouldSlice, mid, omitNamespace, includeAllImages, spellcorrectOverride, useSubscriptionPricing, merchandizingRuleCode);
        // TODO: test validations
    }

    /**
     * Site Search - Searches the items displayed on the storefront.
     *
     * Site Search - Searches the items displayed on the storefront.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontSiteSearchTest() throws ApiException {
        String query = null;
        String filter = null;
        String facetTemplate = null;
        String facetTemplateSubset = null;
        String facet = null;
        String facetFieldRangeQuery = null;
        String facetHierPrefix = null;
        String facetHierValue = null;
        String facetHierDepth = null;
        String facetStartIndex = null;
        String facetPageSize = null;
        String facetSettings = null;
        String facetValueFilter = null;
        String sortBy = null;
        Integer pageSize = null;
        Integer startIndex = null;
        String searchSettings = null;
        Boolean enableSearchTuningRules = null;
        String searchTuningRuleContext = null;
        String searchTuningRuleCode = null;
        String responseGroups = null;
        String facetTemplateExclude = null;
        String facetPrefix = null;
        String responseOptions = null;
        String cursorMark = null;
        String facetValueSort = null;
        String defaultSort = null;
        Boolean shouldSlice = null;
        String mid = null;
        String fieldList = null;
        Boolean omitNamespace = null;
        Boolean includeAllImages = null;
        String spellcorrectOverride = null;
        Boolean useSubscriptionPricing = null;
        String merchandizingRuleCode = null;
        ProductSearchResult response = api.storefrontSiteSearch(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, defaultSort, shouldSlice, mid, fieldList, omitNamespace, includeAllImages, spellcorrectOverride, useSubscriptionPricing, merchandizingRuleCode);
        // TODO: test validations
    }

    /**
     * Gets suggested search terms
     *
     * Suggests possible search terms as the shopper enters search text.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontSuggestTest() throws ApiException {
        String query = null;
        String groups = null;
        Integer pageSize = null;
        String mid = null;
        String filter = null;
        SearchSuggestionResult response = api.storefrontSuggest(query, groups, pageSize, mid, filter);
        // TODO: test validations
    }

    /**
     * Gets suggested search terms
     *
     * Suggests possible search terms as the shopper enters search text.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontSuggest2Test() throws ApiException {
        String query = null;
        String groups = null;
        Integer pageSize = null;
        String searchSettingsName = null;
        String mid = null;
        String filter = null;
        SearchSuggestionResult response = api.storefrontSuggest2(query, groups, pageSize, searchSettingsName, mid, filter);
        // TODO: test validations
    }

    /**
     * Type ahead - Searches the items displayed on the storefront.
     *
     * Type ahead - Searches the items displayed on the storefront.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontVisualSearchTest() throws ApiException {
        String searchTerm = null;
        List<RequestFilter> filters = null;
        List<String> returnfields = null;
        List<String> searchfields = null;
        Boolean ignoregrouping = null;
        Integer numResults = null;
        Integer pageNumber = null;
        String applicationId = null;
        String catalogId = null;
        String sessionId = null;
        String trackingId = null;
        String apiKey = null;
        String revision = null;
        String cip = null;
        Boolean displayDebug = null;
        VisualSearchResult response = api.storefrontVisualSearch(searchTerm, filters, returnfields, searchfields, ignoregrouping, numResults, pageNumber, applicationId, catalogId, sessionId, trackingId, apiKey, revision, cip, displayDebug);
        // TODO: test validations
    }

    /**
     * Debugging relevancy for the Suggest endpoint
     *
     * Comma delimited list of suggestion groups that should be returned. The default is everything. e.g. categories, products.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void suggestDebugTest() throws ApiException {
        String groups = null;
        String query = null;
        Integer pageSize = null;
        String searchSettingsName = null;
        String mid = null;
        String filter = null;
        String campaignId = null;
        Boolean returnUrl = null;
        api.suggestDebug(groups, query, pageSize, searchSettingsName, mid, filter, campaignId, returnUrl);
        // TODO: test validations
    }

}
