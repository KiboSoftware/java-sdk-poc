/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProduct;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductCollection;
import com.kibocommerce.sdk.catalogstorefront.models.ConfiguredProduct;
import com.kibocommerce.sdk.catalogstorefront.models.DiscountSelections;
import com.kibocommerce.sdk.catalogstorefront.models.DiscountValidationSummary;
import com.kibocommerce.sdk.catalogstorefront.models.LocationInventoryCollection;
import com.kibocommerce.sdk.catalogstorefront.models.LocationInventoryQuery;
import java.time.OffsetDateTime;
import com.kibocommerce.sdk.catalogstorefront.models.ProductCostCollection;
import com.kibocommerce.sdk.catalogstorefront.models.ProductCostQuery;
import com.kibocommerce.sdk.catalogstorefront.models.ProductForIndexing;
import com.kibocommerce.sdk.catalogstorefront.models.ProductOptionSelections;
import com.kibocommerce.sdk.catalogstorefront.models.ProductSubstituteCollection;
import com.kibocommerce.sdk.catalogstorefront.models.ProductValidationSummary;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Disabled
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    /**
     * Configures a variant product
     *
     * Creates a new product selection. A create occurs each time a shopper selects a product option as they configure a product. Once all the required product options are configured, the product can be added to a cart.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontConfigureProductTest() throws ApiException {
        String productCode = null;
        Boolean includeOptionDetails = null;
        Boolean skipInventoryCheck = null;
        Integer quantity = null;
        String purchaseLocation = null;
        String variationProductCodeFilter = null;
        Boolean useSubscriptionPricing = null;
        String subscriptionFrequency = null;
        ProductOptionSelections productOptionSelections = null;
        ConfiguredProduct response = api.storefrontConfigureProduct(productCode, includeOptionDetails, skipInventoryCheck, quantity, purchaseLocation, variationProductCodeFilter, useSubscriptionPricing, subscriptionFrequency, productOptionSelections);
        // TODO: test validations
    }

    /**
     * Get a product
     *
     * Retrieves information about a single product given its product code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontGetProductTest() throws ApiException {
        String productCode = null;
        String variationProductCode = null;
        String responseGroups = null;
        Boolean allowInactive = null;
        Boolean skipInventoryCheck = null;
        Boolean supressOutOfStock404 = null;
        Integer quantity = null;
        Boolean acceptVariantProductCode = null;
        String purchaseLocation = null;
        String variationProductCodeFilter = null;
        String sliceValue = null;
        Boolean includeAllImages = null;
        Boolean useSubscriptionPricing = null;
        CatalogRuntimesProduct response = api.storefrontGetProduct(productCode, variationProductCode, responseGroups, allowInactive, skipInventoryCheck, supressOutOfStock404, quantity, acceptVariantProductCode, purchaseLocation, variationProductCodeFilter, sliceValue, includeAllImages, useSubscriptionPricing);
        // TODO: test validations
    }

    /**
     * Get costs for products
     *
     * Get costs for products
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontGetProductCostsTest() throws ApiException {
        ProductCostQuery productCostQuery = null;
        ProductCostCollection response = api.storefrontGetProductCosts(productCostQuery);
        // TODO: test validations
    }

    /**
     * Get a product for indexing
     *
     * Retrieves information about a single product given its product code for Mozu to index in the search engine
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontGetProductForIndexingTest() throws ApiException {
        String productCode = null;
        String responseGroups = null;
        Long productVersion = null;
        OffsetDateTime lastModifiedDate = null;
        ProductForIndexing response = api.storefrontGetProductForIndexing(productCode, responseGroups, productVersion, lastModifiedDate);
        // TODO: test validations
    }

    /**
     * Get location inventories for products
     *
     * Get location inventories for products
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontGetProductInventoriesTest() throws ApiException {
        LocationInventoryQuery locationInventoryQuery = null;
        LocationInventoryCollection response = api.storefrontGetProductInventories(locationInventoryQuery);
        // TODO: test validations
    }

    /**
     * Get product inventory
     *
     * Get product inventory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontGetProductInventoryTest() throws ApiException {
        String productCode = null;
        String locationCodes = null;
        LocationInventoryCollection response = api.storefrontGetProductInventory(productCode, locationCodes);
        // TODO: test validations
    }

    /**
     * Get a list of products
     *
     * Retrieves a list of products that appear on the storefront according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontGetProductsTest() throws ApiException {
        String filter = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String responseGroups = null;
        String responseOptions = null;
        String cursorMark = null;
        String defaultSort = null;
        String mid = null;
        Boolean includeAllImages = null;
        Boolean useSubscriptionPricing = null;
        Boolean includeProductDetailsOnlyProperty = null;
        CatalogRuntimesProductCollection response = api.storefrontGetProducts(filter, startIndex, pageSize, sortBy, responseGroups, responseOptions, cursorMark, defaultSort, mid, includeAllImages, useSubscriptionPricing, includeProductDetailsOnlyProperty);
        // TODO: test validations
    }

    /**
     * Get product substitutions
     *
     * Returns a list of up to 10 products that can be substituted for the provided product code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontProductSubstitutionsTest() throws ApiException {
        String productCode = null;
        ProductSubstituteCollection response = api.storefrontProductSubstitutions(productCode);
        // TODO: test validations
    }

    /**
     * Validates discounts for a product
     *
     * Validate if a collection of discounts is valid for a product.  This includes discounts that would normally be considered order level discounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontValidateDiscountsTest() throws ApiException {
        String productCode = null;
        String variationProductCode = null;
        Integer customerAccountId = null;
        Boolean allowInactive = null;
        Boolean skipInventoryCheck = null;
        DiscountSelections discountSelections = null;
        DiscountValidationSummary response = api.storefrontValidateDiscounts(productCode, variationProductCode, customerAccountId, allowInactive, skipInventoryCheck, discountSelections);
        // TODO: test validations
    }

    /**
     * Validates a variant product
     *
     * Validate the final state of shopper-selected options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storefrontValidateProductTest() throws ApiException {
        String productCode = null;
        Boolean skipInventoryCheck = null;
        Integer quantity = null;
        Boolean skipDefaults = null;
        String purchaseLocation = null;
        Boolean useSubscriptionPricing = null;
        Boolean recalculateDynamicCategories = null;
        Boolean acceptVariantProductCode = null;
        ProductOptionSelections productOptionSelections = null;
        ProductValidationSummary response = api.storefrontValidateProduct(productCode, skipInventoryCheck, quantity, skipDefaults, purchaseLocation, useSubscriptionPricing, recalculateDynamicCategories, acceptVariantProductCode, productOptionSelections);
        // TODO: test validations
    }

}
