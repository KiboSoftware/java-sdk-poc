/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.commerce.models.AutoRefundRequest;
import com.kibocommerce.sdk.commerce.models.CarrierServiceGenerateLabelResponse;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimePackage;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeShipment;
import com.kibocommerce.sdk.commerce.models.ModelReturn;
import com.kibocommerce.sdk.commerce.models.Order;
import com.kibocommerce.sdk.commerce.models.OrderNote;
import com.kibocommerce.sdk.commerce.models.Payment;
import com.kibocommerce.sdk.commerce.models.PaymentAction;
import com.kibocommerce.sdk.commerce.models.PaymentCollection;
import com.kibocommerce.sdk.commerce.models.ReasonCollection;
import com.kibocommerce.sdk.commerce.models.RestockableReturnItem;
import com.kibocommerce.sdk.commerce.models.ReturnAction;
import com.kibocommerce.sdk.commerce.models.ReturnCollection;
import com.kibocommerce.sdk.commerce.models.ReturnItem;
import com.kibocommerce.sdk.commerce.models.ReturnItemCollection;
import com.kibocommerce.sdk.commerce.models.ReturnItemSpecifier;
import com.kibocommerce.sdk.commerce.models.ReturnRefundDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReturnApi
 */
@Disabled
public class ReturnApiTest {

    private final ReturnApi api = new ReturnApi();

    /**
     * Attempt to automatically refund the return
     *
     * Attempt to automatically refund the return
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autoRefundTest() throws ApiException {
        String returnId = null;
        List<AutoRefundRequest> autoRefundRequest = null;
        ModelReturn response = api.autoRefund(returnId, autoRefundRequest);
        // TODO: test validations
    }

    /**
     * Apply a package to the return
     *
     *  package?
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPackageTest() throws ApiException {
        String returnId = null;
        CommerceRuntimePackage commerceRuntimePackage = null;
        CommerceRuntimePackage response = api.createPackage(returnId, commerceRuntimePackage);
        // TODO: test validations
    }

    /**
     * Creates a shipment by grouping together multiple packages into logical shipments
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPackageShipmentsTest() throws ApiException {
        String returnId = null;
        List<String> requestBody = null;
        List<CommerceRuntimePackage> response = api.createPackageShipments(returnId, requestBody);
        // TODO: test validations
    }

    /**
     * Create Payment Action For Return
     *
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentActionForReturnTest() throws ApiException {
        String returnId = null;
        PaymentAction paymentAction = null;
        ModelReturn response = api.createPaymentActionForReturn(returnId, paymentAction);
        // TODO: test validations
    }

    /**
     * Create Returns
     *
     * Creates a new Return for an order or product list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReturnTest() throws ApiException {
        ModelReturn modelReturn = null;
        ModelReturn response = api.createReturn(modelReturn);
        // TODO: test validations
    }

    /**
     * Create Return Item
     *
     * Adds a return item to the return.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReturnItemTest() throws ApiException {
        String returnId = null;
        ReturnItem returnItem = null;
        ModelReturn response = api.createReturnItem(returnId, returnItem);
        // TODO: test validations
    }

    /**
     * Create Return Note
     *
     * Adds a note to the return. This is an internal note that the merchant might want to add to a return. This note is visible in Admin for customer service representatives to see.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReturnNoteTest() throws ApiException {
        String returnId = null;
        OrderNote orderNote = null;
        OrderNote response = api.createReturnNote(returnId, orderNote);
        // TODO: test validations
    }

    /**
     * Create Return Shipping Order
     *
     * Creates a child order for the return for processing replacments. The request body (a collection of ReturnItemSpecifier) is optional. If the body is empty, the operation replaces all remaining items marked for replace. If you want to replace only a specific item(s) marked for return, you must specify the item(s) in the request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReturnShippingOrderTest() throws ApiException {
        String returnId = null;
        List<ReturnItemSpecifier> returnItemSpecifier = null;
        Order response = api.createReturnShippingOrder(returnId, returnItemSpecifier);
        // TODO: test validations
    }

    /**
     * Delete Order Item
     *
     * Removes a particular return item from the return of the current shopper.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrderItemTest() throws ApiException {
        String orderId = null;
        String orderItemId = null;
        String returnId = null;
        String returnItemId = null;
        ModelReturn response = api.deleteOrderItem(orderId, orderItemId, returnId, returnItemId);
        // TODO: test validations
    }

    /**
     * Delete an order package
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePackageTest() throws ApiException {
        String returnId = null;
        String packageId = null;
        api.deletePackage(returnId, packageId);
        // TODO: test validations
    }

    /**
     * Delete Return
     *
     * Deletes a return specified by return Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReturnTest() throws ApiException {
        String returnId = null;
        api.deleteReturn(returnId);
        // TODO: test validations
    }

    /**
     * Delete Return Note
     *
     * Deletes a specific note on a return.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReturnNoteTest() throws ApiException {
        String returnId = null;
        String noteId = null;
        api.deleteReturnNote(returnId, noteId);
        // TODO: test validations
    }

    /**
     * Deletes an existing return shipment
     *
     * Deletes an existing return shipment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteShipmentTest() throws ApiException {
        String returnId = null;
        String shipmentId = null;
        api.deleteShipment(returnId, shipmentId);
        // TODO: test validations
    }

    /**
     * Get Available Return Actions
     *
     * Gets all the available actions on the return specified by return Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableReturnActionsTest() throws ApiException {
        String returnId = null;
        List<String> response = api.getAvailableReturnActions(returnId);
        // TODO: test validations
    }

    /**
     * Get an order package
     *
     * Get an order package
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackageTest() throws ApiException {
        String returnId = null;
        String packageId = null;
        CommerceRuntimePackage response = api.getPackage(returnId, packageId);
        // TODO: test validations
    }

    /**
     * Get an order package
     *
     * Get an order package
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackageLabelTest() throws ApiException {
        String returnId = null;
        String packageId = null;
        Boolean returnAsBase64Png = null;
        api.getPackageLabel(returnId, packageId, returnAsBase64Png);
        // TODO: test validations
    }

    /**
     * Get Payment
     *
     * Gets specific payment on the return specified by return Id and payment Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentTest() throws ApiException {
        String returnId = null;
        String paymentId = null;
        Payment response = api.getPayment(returnId, paymentId);
        // TODO: test validations
    }

    /**
     * Get Payment Distribution
     *
     * Get Payment Distribution
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentDistributionTest() throws ApiException {
        String returnId = null;
        ReturnRefundDetails response = api.getPaymentDistribution(returnId);
        // TODO: test validations
    }

    /**
     * Get Payments
     *
     * Gets payments on the return specified by return Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentsTest() throws ApiException {
        String returnId = null;
        PaymentCollection response = api.getPayments(returnId);
        // TODO: test validations
    }

    /**
     * Get Reasons
     *
     * Gets all the return reasons.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReasonsTest() throws ApiException {
        ReasonCollection response = api.getReasons();
        // TODO: test validations
    }

    /**
     * Get Return
     *
     * Allows for retrieval for a return given only the return Id.  Further manipulation of that returns must be done off of the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReturnTest() throws ApiException {
        String returnId = null;
        ModelReturn response = api.getReturn(returnId);
        // TODO: test validations
    }

    /**
     * Get Return Item
     *
     * Retrieves the details of a single return item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReturnItemTest() throws ApiException {
        String returnId = null;
        String returnItemId = null;
        ReturnItem response = api.getReturnItem(returnId, returnItemId);
        // TODO: test validations
    }

    /**
     * Get Return Items
     *
     * Retrieves the details of all return items in an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReturnItemsTest() throws ApiException {
        String returnId = null;
        ReturnItemCollection response = api.getReturnItems(returnId);
        // TODO: test validations
    }

    /**
     * Get Return Label
     *
     * Gets the return label specified by returnId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReturnLabelTest() throws ApiException {
        String returnId = null;
        CarrierServiceGenerateLabelResponse response = api.getReturnLabel(returnId);
        // TODO: test validations
    }

    /**
     * Get Return Note
     *
     * Retrieves a specific note from a return.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReturnNoteTest() throws ApiException {
        String returnId = null;
        String noteId = null;
        OrderNote response = api.getReturnNote(returnId, noteId);
        // TODO: test validations
    }

    /**
     * Get Return Notes
     *
     * Retrieves a list of all notes for a return.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReturnNotesTest() throws ApiException {
        String returnId = null;
        List<OrderNote> response = api.getReturnNotes(returnId);
        // TODO: test validations
    }

    /**
     * Get Returns
     *
     * Provides a paged, collection of returns for a Site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReturnsTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        String q = null;
        ReturnCollection response = api.getReturns(startIndex, pageSize, sortBy, filter, q);
        // TODO: test validations
    }

    /**
     * Allows a shipment to be retrieved for the order
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getShipmentTest() throws ApiException {
        String returnId = null;
        String shipmentId = null;
        CommerceRuntimeShipment response = api.getShipment(returnId, shipmentId);
        // TODO: test validations
    }

    /**
     * Perform Payment Action For Return
     *
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.  To retrieve the list of available actions, use an operation like GetAvailableReturnActions to view the actions available for the resource you are updating.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performPaymentActionForReturnTest() throws ApiException {
        String returnId = null;
        String paymentId = null;
        PaymentAction paymentAction = null;
        ModelReturn response = api.performPaymentActionForReturn(returnId, paymentId, paymentAction);
        // TODO: test validations
    }

    /**
     * Delete Return
     *
     * Perform Return Action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performReturnActionsTest() throws ApiException {
        ReturnAction returnAction = null;
        ReturnCollection response = api.performReturnActions(returnAction);
        // TODO: test validations
    }

    /**
     * Resend Return Email
     *
     * Resends return email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendReturnEmailTest() throws ApiException {
        ReturnAction returnAction = null;
        api.resendReturnEmail(returnAction);
        // TODO: test validations
    }

    /**
     * Restock Return Items
     *
     * API to restock return item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restockReturnItemsTest() throws ApiException {
        String returnId = null;
        List<RestockableReturnItem> restockableReturnItem = null;
        ModelReturn response = api.restockReturnItems(returnId, restockableReturnItem);
        // TODO: test validations
    }

    /**
     * Delete an order package
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePackageTest() throws ApiException {
        String returnId = null;
        String packageId = null;
        CommerceRuntimePackage commerceRuntimePackage = null;
        CommerceRuntimePackage response = api.updatePackage(returnId, packageId, commerceRuntimePackage);
        // TODO: test validations
    }

    /**
     * Get Reasons
     *
     * Gets all the return reasons.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReturnTest() throws ApiException {
        String returnId = null;
        ModelReturn modelReturn = null;
        ModelReturn response = api.updateReturn(returnId, modelReturn);
        // TODO: test validations
    }

    /**
     * Update Return Note
     *
     * Updates a specific note for a return.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReturnNoteTest() throws ApiException {
        String returnId = null;
        String noteId = null;
        OrderNote orderNote = null;
        OrderNote response = api.updateReturnNote(returnId, noteId, orderNote);
        // TODO: test validations
    }

}
