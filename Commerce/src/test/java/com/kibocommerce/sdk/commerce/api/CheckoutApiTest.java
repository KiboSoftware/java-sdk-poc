/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.commerce.models.Checkout;
import com.kibocommerce.sdk.commerce.models.CheckoutAction;
import com.kibocommerce.sdk.commerce.models.CheckoutCollection;
import com.kibocommerce.sdk.commerce.models.CheckoutGroupRates;
import com.kibocommerce.sdk.commerce.models.CheckoutGroupShippingMethod;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeDestination;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeOrderAttribute;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeOrderItem;
import com.kibocommerce.sdk.commerce.models.DigitalWallet;
import com.kibocommerce.sdk.commerce.models.InventoryTags;
import com.kibocommerce.sdk.commerce.models.ItemsAndDeliveryDates;
import com.kibocommerce.sdk.commerce.models.ItemsForDestination;
import java.time.OffsetDateTime;
import com.kibocommerce.sdk.commerce.models.PaymentAction;
import com.kibocommerce.sdk.commerce.models.SubscriptionInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CheckoutApi
 */
@Disabled
public class CheckoutApiTest {

    private final CheckoutApi api = new CheckoutApi();

    /**
     * Add Checkout Item
     *
     * Adds a product or other item to the checkout of the current shopper.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCheckoutItemTest() throws ApiException {
        String checkoutId = null;
        CommerceRuntimeOrderItem commerceRuntimeOrderItem = null;
        Checkout response = api.addCheckoutItem(checkoutId, commerceRuntimeOrderItem);
        // TODO: test validations
    }

    /**
     * Add Destination
     *
     * Adds a specific destination to the checkout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDestinationTest() throws ApiException {
        String checkoutId = null;
        CommerceRuntimeDestination commerceRuntimeDestination = null;
        CommerceRuntimeDestination response = api.addDestination(checkoutId, commerceRuntimeDestination);
        // TODO: test validations
    }

    /**
     * Apply Coupon
     *
     * Apply a coupon to the Checkout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyCouponTest() throws ApiException {
        String checkoutId = null;
        String couponCode = null;
        Checkout response = api.applyCoupon(checkoutId, couponCode);
        // TODO: test validations
    }

    /**
     * Update Delivery Dates of Items in bulk
     *
     * Update Delivery Dates of Items in bulk
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkUpdateDeliveryDatesTest() throws ApiException {
        String checkoutId = null;
        List<ItemsAndDeliveryDates> itemsAndDeliveryDates = null;
        Checkout response = api.bulkUpdateDeliveryDates(checkoutId, itemsAndDeliveryDates);
        // TODO: test validations
    }

    /**
     * Bulk Update Item Destinations
     *
     * Associate items to destinations in bulk.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkUpdateItemDestinationsTest() throws ApiException {
        String checkoutId = null;
        List<ItemsForDestination> itemsForDestination = null;
        Checkout response = api.bulkUpdateItemDestinations(checkoutId, itemsForDestination);
        // TODO: test validations
    }

    /**
     * Change Checkout PriceList
     *
     * Changes the pricelist associated with a checkout.The desired price list code should be specified on the ApiContext.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeCheckoutPriceListTest() throws ApiException {
        String checkoutId = null;
        String body = null;
        Checkout response = api.changeCheckoutPriceList(checkoutId, body);
        // TODO: test validations
    }

    /**
     * Create Checkout Attributes
     *
     * Creates list of checkout attributes specified by checkout Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCheckoutAttributesTest() throws ApiException {
        String checkoutId = null;
        List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute = null;
        List<CommerceRuntimeOrderAttribute> response = api.createCheckoutAttributes(checkoutId, commerceRuntimeOrderAttribute);
        // TODO: test validations
    }

    /**
     * Create Checkout From Cart
     *
     * Creates a new checkout from an existing cart, that is, when the customer chooses to proceed to checkout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCheckoutFromCartTest() throws ApiException {
        String cartId = null;
        Checkout response = api.createCheckoutFromCart(cartId);
        // TODO: test validations
    }

    /**
     * Create Payment Action
     *
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentActionTest() throws ApiException {
        String checkoutId = null;
        PaymentAction paymentAction = null;
        Checkout response = api.createPaymentAction(checkoutId, paymentAction);
        // TODO: test validations
    }

    /**
     * Delete Checkout Item
     *
     * Removes a particular item from the checkout of the current shopper.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCheckoutItemTest() throws ApiException {
        String checkoutId = null;
        String itemId = null;
        Checkout response = api.deleteCheckoutItem(checkoutId, itemId);
        // TODO: test validations
    }

    /**
     * Get Available Actions
     *
     * Retrieves available actions which depends on the status of the checkout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableActionsTest() throws ApiException {
        String checkoutId = null;
        List<String> response = api.getAvailableActions(checkoutId);
        // TODO: test validations
    }

    /**
     * Get Available Shipping Methods
     *
     * Retrieves available shipping methods for groupings. Typically used to display available shipping method options on the checkout page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableShippingMethodsTest() throws ApiException {
        String checkoutId = null;
        List<CheckoutGroupRates> response = api.getAvailableShippingMethods(checkoutId);
        // TODO: test validations
    }

    /**
     * Get Checkout
     *
     * Retrieves the details of a checkout specified by the checkout ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCheckoutTest() throws ApiException {
        String checkoutId = null;
        Checkout response = api.getCheckout(checkoutId);
        // TODO: test validations
    }

    /**
     * Get Checkout Attributes
     *
     * Gets the list of attributes specified by checkout Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCheckoutAttributesTest() throws ApiException {
        String checkoutId = null;
        List<CommerceRuntimeOrderAttribute> response = api.getCheckoutAttributes(checkoutId);
        // TODO: test validations
    }

    /**
     * Get Checkouts
     *
     * Retrieves a list of checkouts according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCheckoutsTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        String q = null;
        Integer qLimit = null;
        CheckoutCollection response = api.getCheckouts(startIndex, pageSize, sortBy, filter, q, qLimit);
        // TODO: test validations
    }

    /**
     * Get Destination
     *
     * Gets a destination specified by the checkout Id and destination Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDestinationTest() throws ApiException {
        String checkoutId = null;
        String destinationId = null;
        CommerceRuntimeDestination response = api.getDestination(checkoutId, destinationId);
        // TODO: test validations
    }

    /**
     * Get Destinations
     *
     * Gets all the destinations specified by the checkout Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDestinationsTest() throws ApiException {
        String checkoutId = null;
        List<CommerceRuntimeDestination> response = api.getDestinations(checkoutId);
        // TODO: test validations
    }

    /**
     * Perform Checkout Action
     *
     * Perform an action on the checkout. Available actions depend on the current state of the checkout. If in doubt, get a list of available checkout actions first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performCheckoutActionTest() throws ApiException {
        String checkoutId = null;
        CheckoutAction checkoutAction = null;
        Checkout response = api.performCheckoutAction(checkoutId, checkoutAction);
        // TODO: test validations
    }

    /**
     * Perform Payment Action
     *
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction. \\r\\nIf in doubt, get a list of available payment actions first (such as AuthAndCapture, AuthorizePayment, CapturePayment, VoidPayment, CreditPayment, RequestCheck, ApplyCheck, or DeclineCheck). Note that for order management-only systems that use No-Operation payment gateways, such as due to the payments being processed by an external storefront or service instead of UCP, these actions will not actually be performed by UCP and instead will be automatically marked as a success.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performPaymentActionTest() throws ApiException {
        String checkoutId = null;
        String paymentId = null;
        PaymentAction paymentAction = null;
        Checkout response = api.performPaymentAction(checkoutId, paymentId, paymentAction);
        // TODO: test validations
    }

    /**
     * Process Digital Wallet
     *
     * Processes the digital wallet sent specified by checkout id and digital     wallet type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processDigitalWalletTest() throws ApiException {
        String checkoutId = null;
        String digitalWalletType = null;
        DigitalWallet digitalWallet = null;
        Checkout response = api.processDigitalWallet(checkoutId, digitalWalletType, digitalWallet);
        // TODO: test validations
    }

    /**
     * Remove Coupon
     *
     * Removes a coupon that had been previously applied to the checkout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCouponTest() throws ApiException {
        String checkoutId = null;
        String couponCode = null;
        Checkout response = api.removeCoupon(checkoutId, couponCode);
        // TODO: test validations
    }

    /**
     * Remove Coupons
     *
     * Removes all coupons that had been previously applied to the checkout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCouponsTest() throws ApiException {
        String checkoutId = null;
        Checkout response = api.removeCoupons(checkoutId);
        // TODO: test validations
    }

    /**
     * Remove Destination
     *
     * Removes a destination specified by checkout Id and destination Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeDestinationTest() throws ApiException {
        String checkoutId = null;
        String destinationId = null;
        api.removeDestination(checkoutId, destinationId);
        // TODO: test validations
    }

    /**
     * Resend Checkout Confirmation Email
     *
     * esends email on checkout confirmation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendCheckoutConfirmationEmailTest() throws ApiException {
        String checkoutId = null;
        api.resendCheckoutConfirmationEmail(checkoutId);
        // TODO: test validations
    }

    /**
     * Set Shipping Methods
     *
     * Sets the shipping method for specified groupings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setShippingMethodsTest() throws ApiException {
        String checkoutId = null;
        List<CheckoutGroupShippingMethod> checkoutGroupShippingMethod = null;
        Checkout response = api.setShippingMethods(checkoutId, checkoutGroupShippingMethod);
        // TODO: test validations
    }

    /**
     * Split Item
     *
     * Splits an existing item into two. The new item&#39;s quantity will be !:quantity and the original item&#39;s quantity will be reduced accordingly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void splitItemTest() throws ApiException {
        String checkoutId = null;
        String itemId = null;
        Integer quantity = null;
        Checkout response = api.splitItem(checkoutId, itemId, quantity);
        // TODO: test validations
    }

    /**
     * Update Checkout
     *
     * Updates the details of a checkout specified by the checkout ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCheckoutTest() throws ApiException {
        String checkoutId = null;
        Checkout checkout = null;
        Checkout response = api.updateCheckout(checkoutId, checkout);
        // TODO: test validations
    }

    /**
     * Update Checkout Attribute
     *
     * Updates the list of checkout attributes specified by checkout id and removes the missing attributes if not passed when removeMissing flag is set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCheckoutAttributeTest() throws ApiException {
        String checkoutId = null;
        Boolean removeMissing = null;
        List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute = null;
        List<CommerceRuntimeOrderAttribute> response = api.updateCheckoutAttribute(checkoutId, removeMissing, commerceRuntimeOrderAttribute);
        // TODO: test validations
    }

    /**
     * Update Destination
     *
     * Updates a destination specified by checkout Id and destination Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDestinationTest() throws ApiException {
        String checkoutId = null;
        String destinationId = null;
        CommerceRuntimeDestination commerceRuntimeDestination = null;
        CommerceRuntimeDestination response = api.updateDestination(checkoutId, destinationId, commerceRuntimeDestination);
        // TODO: test validations
    }

    /**
     * Update the Delivery Date of the Item
     *
     * Update the Delivery Date of the Item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemDeliveryDateTest() throws ApiException {
        String checkoutId = null;
        String itemId = null;
        OffsetDateTime body = null;
        Checkout response = api.updateItemDeliveryDate(checkoutId, itemId, body);
        // TODO: test validations
    }

    /**
     * Update Item Destination
     *
     * Associate an item to a destination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemDestinationTest() throws ApiException {
        String checkoutId = null;
        String itemId = null;
        String destinationId = null;
        Checkout response = api.updateItemDestination(checkoutId, itemId, destinationId);
        // TODO: test validations
    }

    /**
     * Update Item Subscription Info
     *
     * Updates the subscription info on the Item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionInfoTest() throws ApiException {
        String checkoutId = null;
        String itemId = null;
        SubscriptionInfo subscriptionInfo = null;
        Checkout response = api.updateSubscriptionInfo(checkoutId, itemId, subscriptionInfo);
        // TODO: test validations
    }

    /**
     * Upsert Inventory Tags
     *
     * Upsert Inventory Tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertInventoryTagsTest() throws ApiException {
        String checkoutId = null;
        String itemId = null;
        List<InventoryTags> inventoryTags = null;
        Checkout response = api.upsertInventoryTags(checkoutId, itemId, inventoryTags);
        // TODO: test validations
    }

}
