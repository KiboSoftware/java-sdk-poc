/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeOrderItem;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeShippingRate;
import com.kibocommerce.sdk.commerce.models.FulfillmentInfo;
import com.kibocommerce.sdk.commerce.models.Quote;
import com.kibocommerce.sdk.commerce.models.QuoteAdjustment;
import com.kibocommerce.sdk.commerce.models.QuoteCollection;
import com.kibocommerce.sdk.commerce.models.QuoteComment;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuoteApi
 */
@Disabled
public class QuoteApiTest {

    private final QuoteApi api = new QuoteApi();

    /**
     * Add Item To Quote
     *
     * Adds an item to the Quote of the current shopper.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addItemToQuoteTest() throws ApiException {
        String quoteId = null;
        String updateMode = null;
        CommerceRuntimeOrderItem commerceRuntimeOrderItem = null;
        Quote response = api.addItemToQuote(quoteId, updateMode, commerceRuntimeOrderItem);
        // TODO: test validations
    }

    /**
     * Apply Coupon
     *
     * Apply a coupon to the quote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyCouponTest() throws ApiException {
        String quoteId = null;
        String couponCode = null;
        String updateMode = null;
        Quote response = api.applyCoupon(quoteId, couponCode, updateMode);
        // TODO: test validations
    }

    /**
     * Copy quote
     *
     * Copies a source quote and creates a new quote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyQuoteTest() throws ApiException {
        String quoteId = null;
        Quote response = api.copyQuote(quoteId);
        // TODO: test validations
    }

    /**
     * Create Comment
     *
     * Create a comment on a specific quote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String quoteId = null;
        String updateMode = null;
        QuoteComment quoteComment = null;
        QuoteComment response = api.create(quoteId, updateMode, quoteComment);
        // TODO: test validations
    }

    /**
     * Create quote
     *
     * Creates a new B2B quote. With quotes, buyers can request an estimate based on a list of products they are interested in. Sellers can evaluate these requests and make adjustments to pricing, discounts, or other criteria before the buyer chooses whether to place the order or not. Comments can be left on the quote to communicate during this negotiation process.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createQuoteTest() throws ApiException {
        Quote quote = null;
        Quote response = api.createQuote(quote);
        // TODO: test validations
    }

    /**
     * Create Quote From Cart
     *
     * Creates a new quote from an existing cart, that is, when the customer chooses to initate quote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createQuoteFromCartTest() throws ApiException {
        String cartId = null;
        String updateMode = null;
        Quote response = api.createQuoteFromCart(cartId, updateMode);
        // TODO: test validations
    }

    /**
     * Delete Quote
     *
     * Deletes the quote specified by quote Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteQuoteTest() throws ApiException {
        String quoteId = null;
        Boolean draft = null;
        api.deleteQuote(quoteId, draft);
        // TODO: test validations
    }

    /**
     * Delete Quote Item
     *
     * Delete Quote Item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteQuoteItemTest() throws ApiException {
        String quoteId = null;
        String quoteItemId = null;
        String updateMode = null;
        api.deleteQuoteItem(quoteId, quoteItemId, updateMode);
        // TODO: test validations
    }

    /**
     * Get Quote Comment
     *
     * Retrieves a specific quote comment from an quote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        String quoteId = null;
        String commentId = null;
        Boolean draft = null;
        QuoteComment response = api.get(quoteId, commentId, draft);
        // TODO: test validations
    }

    /**
     * Get All Quote Comments
     *
     * Retrieves all quote comments from an quote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        String quoteId = null;
        QuoteComment response = api.getAll(quoteId);
        // TODO: test validations
    }

    /**
     * Get Available Shipping Methods
     *
     * Retrieves available shipping methods for quotes. Typically used to display available shipping method options on the quote page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableShippingMethodsTest() throws ApiException {
        String quoteId = null;
        Boolean draft = null;
        List<CommerceRuntimeShippingRate> response = api.getAvailableShippingMethods(quoteId, draft);
        // TODO: test validations
    }

    /**
     * Get Quote
     *
     * Retrieves the details of a quote specified by the quote ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteTest() throws ApiException {
        String quoteId = null;
        Boolean draft = null;
        Quote response = api.getQuote(quoteId, draft);
        // TODO: test validations
    }

    /**
     * Get Quote By Name
     *
     * Retrieves quote by its name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteByNameTest() throws ApiException {
        Integer customerAccountId = null;
        String quoteName = null;
        Boolean draft = null;
        Quote response = api.getQuoteByName(customerAccountId, quoteName, draft);
        // TODO: test validations
    }

    /**
     * Get Quote Item
     *
     * Retrieves an individual Quote item from a Quote specified by quote Id and quote item Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteItemTest() throws ApiException {
        String quoteId = null;
        String quoteItemId = null;
        Boolean draft = null;
        CommerceRuntimeOrderItem response = api.getQuoteItem(quoteId, quoteItemId, draft);
        // TODO: test validations
    }

    /**
     * Get Quote Items
     *
     * Returns a listing of Quotes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteItemsTest() throws ApiException {
        String quoteId = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        List<CommerceRuntimeOrderItem> response = api.getQuoteItems(quoteId, startIndex, pageSize, sortBy, filter);
        // TODO: test validations
    }

    /**
     * Get Quote Items By Quote Name
     *
     * Gets the quote specified by the quote name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteItemsByQuoteNameTest() throws ApiException {
        Integer customerAccountId = null;
        String quoteName = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        List<CommerceRuntimeOrderItem> response = api.getQuoteItemsByQuoteName(customerAccountId, quoteName, startIndex, pageSize, sortBy, filter);
        // TODO: test validations
    }

    /**
     * Get Quotes
     *
     * Retrieves a list of B2B Quotes according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuotesTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        String q = null;
        Integer qLimit = null;
        QuoteCollection response = api.getQuotes(startIndex, pageSize, sortBy, filter, q, qLimit);
        // TODO: test validations
    }

    /**
     * Remove Coupon
     *
     * Removes a coupon that had been previously applied to the Quote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCouponTest() throws ApiException {
        String quoteId = null;
        String couponCode = null;
        String updateMode = null;
        Quote response = api.removeCoupon(quoteId, couponCode, updateMode);
        // TODO: test validations
    }

    /**
     * Remove Coupons
     *
     * Removes all coupons that had been previously applied to the Quote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCouponsTest() throws ApiException {
        String quoteId = null;
        String updateMode = null;
        Quote response = api.removeCoupons(quoteId, updateMode);
        // TODO: test validations
    }

    /**
     * Send Quote Email
     *
     * Send Quote email to provided email addresses or email mentioned on the quote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendQuoteEmailTest() throws ApiException {
        String quoteId = null;
        List<String> requestBody = null;
        api.sendQuoteEmail(quoteId, requestBody);
        // TODO: test validations
    }

    /**
     * Update Fulfillment Info
     *
     * Updates the fulfillmentInfo of quote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFulfillmentInfoTest() throws ApiException {
        String quoteId = null;
        String updateMode = null;
        FulfillmentInfo fulfillmentInfo = null;
        Quote response = api.updateFulfillmentInfo(quoteId, updateMode, fulfillmentInfo);
        // TODO: test validations
    }

    /**
     * Update Item Fulfillment
     *
     * Updates the fulfillment method and/or location of an individual quote item in the quote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemFulfillmentTest() throws ApiException {
        String quoteId = null;
        String quoteItemId = null;
        String updateMode = null;
        CommerceRuntimeOrderItem commerceRuntimeOrderItem = null;
        Quote response = api.updateItemFulfillment(quoteId, quoteItemId, updateMode, commerceRuntimeOrderItem);
        // TODO: test validations
    }

    /**
     * Update Item Product Price
     *
     * Overrides the price of an individual quote item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemProductPriceTest() throws ApiException {
        String quoteId = null;
        String quoteItemId = null;
        Double price = null;
        String updateMode = null;
        Quote response = api.updateItemProductPrice(quoteId, quoteItemId, price, updateMode);
        // TODO: test validations
    }

    /**
     * Update Item Quantity
     *
     * Updates the quantity of an individual Quote item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemQuantityTest() throws ApiException {
        String quoteId = null;
        String quoteItemId = null;
        Integer quantity = null;
        String updateMode = null;
        Quote response = api.updateItemQuantity(quoteId, quoteItemId, quantity, updateMode);
        // TODO: test validations
    }

    /**
     * Update Quote
     *
     * Updates a quote specified by quote Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQuoteTest() throws ApiException {
        String quoteId = null;
        String updateMode = null;
        Quote quote = null;
        Quote response = api.updateQuote(quoteId, updateMode, quote);
        // TODO: test validations
    }

    /**
     * Update Quote Adjustments
     *
     * Set product, shipping, and handling adjustments on the specified quote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQuoteAdjustmentsTest() throws ApiException {
        String quoteId = null;
        String updateMode = null;
        QuoteAdjustment quoteAdjustment = null;
        Quote response = api.updateQuoteAdjustments(quoteId, updateMode, quoteAdjustment);
        // TODO: test validations
    }

}
