/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.commerce.models.Adjustment;
import com.kibocommerce.sdk.commerce.models.AlternateContact;
import com.kibocommerce.sdk.commerce.models.BillingInfo;
import com.kibocommerce.sdk.commerce.models.CancelReasonCollection;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeAppliedDiscount;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeCanceledReason;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeOrderAttribute;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeOrderItem;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimePackage;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeShipment;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeShippingRate;
import com.kibocommerce.sdk.commerce.models.DigitalPackage;
import com.kibocommerce.sdk.commerce.models.DigitalWallet;
import com.kibocommerce.sdk.commerce.models.ExtendedProperty;
import com.kibocommerce.sdk.commerce.models.FulfillmentAction;
import com.kibocommerce.sdk.commerce.models.FulfillmentInfo;
import com.kibocommerce.sdk.commerce.models.InventoryTags;
import java.time.OffsetDateTime;
import com.kibocommerce.sdk.commerce.models.Order;
import com.kibocommerce.sdk.commerce.models.OrderAction;
import com.kibocommerce.sdk.commerce.models.OrderCollection;
import com.kibocommerce.sdk.commerce.models.OrderItemCollection;
import com.kibocommerce.sdk.commerce.models.OrderNote;
import com.kibocommerce.sdk.commerce.models.OrderReturnableItemCollection;
import com.kibocommerce.sdk.commerce.models.OrderValidationResult;
import com.kibocommerce.sdk.commerce.models.Payment;
import com.kibocommerce.sdk.commerce.models.PaymentAction;
import com.kibocommerce.sdk.commerce.models.PaymentCollection;
import com.kibocommerce.sdk.commerce.models.Pickup;
import com.kibocommerce.sdk.commerce.models.PricingTaxableOrder;
import com.kibocommerce.sdk.commerce.models.Refund;
import com.kibocommerce.sdk.commerce.models.RefundReasonCollection;
import com.kibocommerce.sdk.commerce.models.RepriceShipmentObject;
import com.kibocommerce.sdk.commerce.models.ShipmentAdjustment;
import com.kibocommerce.sdk.commerce.models.ShipmentItemAdjustment;
import com.kibocommerce.sdk.commerce.models.SplitShipmentsObject;
import com.kibocommerce.sdk.commerce.models.SubscriptionInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrderApi
 */
@Disabled
public class OrderApiTest {

    private final OrderApi api = new OrderApi();

    /**
     * Adds Extended Properties
     *
     * Adds extended properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addExtendedPropertiesTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        List<ExtendedProperty> extendedProperty = null;
        List<ExtendedProperty> response = api.addExtendedProperties(orderId, updateMode, version, extendedProperty);
        // TODO: test validations
    }

    /**
     * Add Validation Result
     *
     * Adds a validation result from an external system to an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addValidationResultTest() throws ApiException {
        String orderId = null;
        OrderValidationResult orderValidationResult = null;
        OrderValidationResult response = api.addValidationResult(orderId, orderValidationResult);
        // TODO: test validations
    }

    /**
     * Apply Adjustment
     *
     * Apply a pricing adjustment to the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyAdjustmentTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        Adjustment adjustment = null;
        Order response = api.applyAdjustment(orderId, updateMode, version, adjustment);
        // TODO: test validations
    }

    /**
     * Apply Coupon
     *
     * Apply a coupon to the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyCouponTest() throws ApiException {
        String orderId = null;
        String couponCode = null;
        String updateMode = null;
        String version = null;
        Order response = api.applyCoupon(orderId, couponCode, updateMode, version);
        // TODO: test validations
    }

    /**
     * Apply Handling Adjustment
     *
     * Apply a handling adjustment to the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyHandlingAdjustmentTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        Adjustment adjustment = null;
        Order response = api.applyHandlingAdjustment(orderId, updateMode, version, adjustment);
        // TODO: test validations
    }

    /**
     * Apply Shipping Adjustment
     *
     * Apply a shipping adjustment to the order specified by order Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyShippingAdjustmentTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        Adjustment adjustment = null;
        Order response = api.applyShippingAdjustment(orderId, updateMode, version, adjustment);
        // TODO: test validations
    }

    /**
     * Auto Capture Payments
     *
     * Amount to capture is total of fulfilled shipments - order adjustment - amount already captured.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autoCapturePaymentsTest() throws ApiException {
        String orderId = null;
        Boolean forceCapture = null;
        Order response = api.autoCapturePayments(orderId, forceCapture);
        // TODO: test validations
    }

    /**
     * Cancel Order
     *
     * Cancel an order with the cancel reason.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelOrderTest() throws ApiException {
        String orderId = null;
        CommerceRuntimeCanceledReason commerceRuntimeCanceledReason = null;
        Order response = api.cancelOrder(orderId, commerceRuntimeCanceledReason);
        // TODO: test validations
    }

    /**
     * Change Order Price List
     *
     * Changes the pricelist associated with an order.The desired price list code should be specified on the ApiContext.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeOrderPriceListTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        String body = null;
        Order response = api.changeOrderPriceList(orderId, updateMode, version, body);
        // TODO: test validations
    }

    /**
     * Change Order UserId
     *
     * Changes the User ID associated with an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeOrderUserIdTest() throws ApiException {
        String orderId = null;
        Order response = api.changeOrderUserId(orderId);
        // TODO: test validations
    }

    /**
     * Create Digital Package
     *
     * Apply a digital package to the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDigitalPackageTest() throws ApiException {
        String orderId = null;
        DigitalPackage digitalPackage = null;
        DigitalPackage response = api.createDigitalPackage(orderId, digitalPackage);
        // TODO: test validations
    }

    /**
     * Create Order
     *
     * Creates a new order for no-cart quick-ordering scenarios. The full API payload required integration with the ecommerce front-end.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrderTest() throws ApiException {
        String cartId = null;
        String quoteId = null;
        Order order = null;
        Order response = api.createOrder(cartId, quoteId, order);
        // TODO: test validations
    }

    /**
     * Create Order Attributes
     *
     * Adds a attributeSet to the order. This is an internal attributeSet that the merchant might want to add to an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrderAttributesTest() throws ApiException {
        String orderId = null;
        List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute = null;
        List<CommerceRuntimeOrderAttribute> response = api.createOrderAttributes(orderId, commerceRuntimeOrderAttribute);
        // TODO: test validations
    }

    /**
     * Create Order Item
     *
     * Adds a product or other item to the cart of the current shopper.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrderItemTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        Boolean skipInventoryCheck = null;
        String zipCode = null;
        CommerceRuntimeOrderItem commerceRuntimeOrderItem = null;
        Order response = api.createOrderItem(orderId, updateMode, version, skipInventoryCheck, zipCode, commerceRuntimeOrderItem);
        // TODO: test validations
    }

    /**
     * Create Order Note
     *
     * Adds a note to the order. This is an internal note that the merchant might want to add to an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrderNoteTest() throws ApiException {
        String orderId = null;
        OrderNote orderNote = null;
        OrderNote response = api.createOrderNote(orderId, orderNote);
        // TODO: test validations
    }

    /**
     * Apply a package to the order
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPackageTest() throws ApiException {
        String orderId = null;
        CommerceRuntimePackage commerceRuntimePackage = null;
        CommerceRuntimePackage response = api.createPackage(orderId, commerceRuntimePackage);
        // TODO: test validations
    }

    /**
     * Creates a shipment by grouping together multiple packages into logical shipments
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPackageShipmentsTest() throws ApiException {
        String orderId = null;
        List<String> requestBody = null;
        List<CommerceRuntimePackage> response = api.createPackageShipments(orderId, requestBody);
        // TODO: test validations
    }

    /**
     * Create Payment Action
     *
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentActionTest() throws ApiException {
        String orderId = null;
        PaymentAction paymentAction = null;
        Order response = api.createPaymentAction(orderId, paymentAction);
        // TODO: test validations
    }

    /**
     * Create Pickup
     *
     * Apply a pickup to the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPickupTest() throws ApiException {
        String orderId = null;
        Pickup pickup = null;
        Pickup response = api.createPickup(orderId, pickup);
        // TODO: test validations
    }

    /**
     * Create Refund
     *
     * Apply a refund to the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRefundTest() throws ApiException {
        String orderId = null;
        Refund refund = null;
        Refund response = api.createRefund(orderId, refund);
        // TODO: test validations
    }

    /**
     * Delete Digital Package
     *
     * Delete an order digital package.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDigitalPackageTest() throws ApiException {
        String orderId = null;
        String digitalPackageId = null;
        api.deleteDigitalPackage(orderId, digitalPackageId);
        // TODO: test validations
    }

    /**
     * Delete Extended Properties
     *
     * Delete extended properties on the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExtendedPropertiesTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        List<String> requestBody = null;
        api.deleteExtendedProperties(orderId, updateMode, version, requestBody);
        // TODO: test validations
    }

    /**
     * Delete Extended Property
     *
     * Removes a particular order item from the order of the current shopper.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExtendedPropertyTest() throws ApiException {
        String orderId = null;
        String key = null;
        String updateMode = null;
        String version = null;
        api.deleteExtendedProperty(orderId, key, updateMode, version);
        // TODO: test validations
    }

    /**
     * Delete Order Draft
     *
     * Deletes a draft version of an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrderDraftTest() throws ApiException {
        String orderId = null;
        String version = null;
        api.deleteOrderDraft(orderId, version);
        // TODO: test validations
    }

    /**
     * Delete Order Item
     *
     * Removes a particular order item from the order of the current shopper.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrderItemTest() throws ApiException {
        String orderId = null;
        String orderItemId = null;
        String updateMode = null;
        String version = null;
        Order response = api.deleteOrderItem(orderId, orderItemId, updateMode, version);
        // TODO: test validations
    }

    /**
     * Delete Order Note
     *
     * Deletes a specific order note on an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrderNoteTest() throws ApiException {
        String orderId = null;
        String noteId = null;
        api.deleteOrderNote(orderId, noteId);
        // TODO: test validations
    }

    /**
     * Delete an order package
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePackageTest() throws ApiException {
        String orderId = null;
        String packageId = null;
        api.deletePackage(orderId, packageId);
        // TODO: test validations
    }

    /**
     * Delete Pickup
     *
     * Delete an order pickup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePickupTest() throws ApiException {
        String orderId = null;
        String pickupId = null;
        api.deletePickup(orderId, pickupId);
        // TODO: test validations
    }

    /**
     * Deletes an existing order shipment
     *
     * Deletes an existing order shipment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteShipmentTest() throws ApiException {
        String orderId = null;
        String shipmentId = null;
        api.deleteShipment(orderId, shipmentId);
        // TODO: test validations
    }

    /**
     * Evaluate Order Rollup Status
     *
     * Evaluate Order Rollup Status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void evaluateOrderRollupStatusTest() throws ApiException {
        String orderId = null;
        Order response = api.evaluateOrderRollupStatus(orderId);
        // TODO: test validations
    }

    /**
     * Get Available Actions
     *
     * Retrieves available order actions which depends on the status of the order.Possible actions can be Create, Submit, SetAsProcessing, Close or Cancel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableActionsTest() throws ApiException {
        String orderId = null;
        List<String> response = api.getAvailableActions(orderId);
        // TODO: test validations
    }

    /**
     * Get Available Digital Package Fulfillment Actions
     *
     * Retrieves available fulfillment actions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableDigitalPackageFulfillmentActionsTest() throws ApiException {
        String orderId = null;
        String digitalPackageId = null;
        List<String> response = api.getAvailableDigitalPackageFulfillmentActions(orderId, digitalPackageId);
        // TODO: test validations
    }

    /**
     * Retrieves available fulfillment actions
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailablePackageFulfillmentActionsTest() throws ApiException {
        String orderId = null;
        String packageId = null;
        List<String> response = api.getAvailablePackageFulfillmentActions(orderId, packageId);
        // TODO: test validations
    }

    /**
     * Get Available Payment Actions
     *
     * Retrieves available payment actions which depends on the status of the order&#39;s payment transaction.   Possible actions can be \&quot;Create,\&quot; \&quot;Capture,\&quot; \&quot;Void,\&quot; \&quot;AuthCapture,\&quot; or \&quot;ReceiveCheck.\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailablePaymentActionsTest() throws ApiException {
        String orderId = null;
        String paymentId = null;
        List<String> response = api.getAvailablePaymentActions(orderId, paymentId);
        // TODO: test validations
    }

    /**
     * Get Available Pickup Fulfillment Actions
     *
     * Retrieves available fulfillment actions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailablePickupFulfillmentActionsTest() throws ApiException {
        String orderId = null;
        String pickupId = null;
        List<String> response = api.getAvailablePickupFulfillmentActions(orderId, pickupId);
        // TODO: test validations
    }

    /**
     * Get Available Shipment Methods
     *
     * Retrieves available shipping methods. Typically used to display available shipping method options on the checkout page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableShipmentMethodsTest() throws ApiException {
        String orderId = null;
        Boolean draft = null;
        List<CommerceRuntimeShippingRate> response = api.getAvailableShipmentMethods(orderId, draft);
        // TODO: test validations
    }

    /**
     * Get Billing Info
     *
     * Retrieves the customer&#39;s billing address.If paying by credit card, it retrieves the card&#39;s number, expiration date, card holder&#39;s name and billing address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBillingInfoTest() throws ApiException {
        String orderId = null;
        Boolean draft = null;
        BillingInfo response = api.getBillingInfo(orderId, draft);
        // TODO: test validations
    }

    /**
     * Get Digital Package
     *
     * Get an order digital package.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDigitalPackageTest() throws ApiException {
        String orderId = null;
        String digitalPackageId = null;
        DigitalPackage response = api.getDigitalPackage(orderId, digitalPackageId);
        // TODO: test validations
    }

    /**
     * Get Extended Properties
     *
     * Get extended properties on an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtendedPropertiesTest() throws ApiException {
        String orderId = null;
        Boolean draft = null;
        List<ExtendedProperty> response = api.getExtendedProperties(orderId, draft);
        // TODO: test validations
    }

    /**
     * Get Fulfillment Info
     *
     * Retrieves an order&#39;s fulfillment information specified by order ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFulfillmentInfoTest() throws ApiException {
        String orderId = null;
        Boolean draft = null;
        FulfillmentInfo response = api.getFulfillmentInfo(orderId, draft);
        // TODO: test validations
    }

    /**
     * Get Order
     *
     * Retrieves the details of an order specified by the order ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderTest() throws ApiException {
        String orderId = null;
        Boolean draft = null;
        Boolean includeBin = null;
        String mode = null;
        Order response = api.getOrder(orderId, draft, includeBin, mode);
        // TODO: test validations
    }

    /**
     * Get Order Attributes
     *
     * Retrieves a list of all attribute sets for an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderAttributesTest() throws ApiException {
        String orderId = null;
        List<CommerceRuntimeOrderAttribute> response = api.getOrderAttributes(orderId);
        // TODO: test validations
    }

    /**
     * Get Order Item
     *
     * Retrieves the details of a single order item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderItemTest() throws ApiException {
        String orderId = null;
        String orderItemId = null;
        Boolean draft = null;
        CommerceRuntimeOrderItem response = api.getOrderItem(orderId, orderItemId, draft);
        // TODO: test validations
    }

    /**
     * Get Order Item Via LineId
     *
     * Retrieves the details of a single order item via its line id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderItemViaLineIdTest() throws ApiException {
        String orderId = null;
        Integer lineId = null;
        Boolean draft = null;
        CommerceRuntimeOrderItem response = api.getOrderItemViaLineId(orderId, lineId, draft);
        // TODO: test validations
    }

    /**
     * Get Order Items
     *
     * Retrieves the details of all items in an order specified by order Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderItemsTest() throws ApiException {
        String orderId = null;
        Boolean draft = null;
        OrderItemCollection response = api.getOrderItems(orderId, draft);
        // TODO: test validations
    }

    /**
     * Get Order Note
     *
     * Retrieves a specific order note from an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderNoteTest() throws ApiException {
        String orderId = null;
        String noteId = null;
        OrderNote response = api.getOrderNote(orderId, noteId);
        // TODO: test validations
    }

    /**
     * Get Order Notes
     *
     * Retrieves a list of all notes for an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderNotesTest() throws ApiException {
        String orderId = null;
        List<OrderNote> response = api.getOrderNotes(orderId);
        // TODO: test validations
    }

    /**
     * Get Order Returnable Items
     *
     * Provides fulfillment information for order items such as quantity ordered, fulfilled, and returned. Indicates which items are eligible for return.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderReturnableItemsTest() throws ApiException {
        String orderId = null;
        OrderReturnableItemCollection response = api.getOrderReturnableItems(orderId);
        // TODO: test validations
    }

    /**
     * Get Orders
     *
     * Retrieves a list of orders according to any specified filter criteria and sort options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrdersTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        String q = null;
        Integer qLimit = null;
        Boolean includeBin = null;
        String responseGroups = null;
        String mode = null;
        OrderCollection response = api.getOrders(startIndex, pageSize, sortBy, filter, q, qLimit, includeBin, responseGroups, mode);
        // TODO: test validations
    }

    /**
     * Get an order package
     *
     * Get an order package
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackageTest() throws ApiException {
        String orderId = null;
        String packageId = null;
        CommerceRuntimePackage response = api.getPackage(orderId, packageId);
        // TODO: test validations
    }

    /**
     * Get an order package label
     *
     * Get an order package label
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackageLabelTest() throws ApiException {
        String orderId = null;
        String packageId = null;
        api.getPackageLabel(orderId, packageId);
        // TODO: test validations
    }

    /**
     * Get Payment
     *
     * Retrieves a specific payment transaction from the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentTest() throws ApiException {
        String orderId = null;
        String paymentId = null;
        Payment response = api.getPayment(orderId, paymentId);
        // TODO: test validations
    }

    /**
     * Get Payments
     *
     * Retrieves payment transactions for an order. Allows filtering and sorting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentsTest() throws ApiException {
        String orderId = null;
        PaymentCollection response = api.getPayments(orderId);
        // TODO: test validations
    }

    /**
     * Get Pickup
     *
     * Gets a specified pickup on the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPickupTest() throws ApiException {
        String orderId = null;
        String pickupId = null;
        Pickup response = api.getPickup(orderId, pickupId);
        // TODO: test validations
    }

    /**
     * Get Order Cancel Reasons
     *
     * Gets order cancellation reasons based on a category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReasonsTest() throws ApiException {
        String category = null;
        CancelReasonCollection response = api.getReasons(category);
        // TODO: test validations
    }

    /**
     * Get Refund Reasons
     *
     * Gets all the refund reasons.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRefundReasonsTest() throws ApiException {
        RefundReasonCollection response = api.getRefundReasons();
        // TODO: test validations
    }

    /**
     * Get Shipment
     *
     * Allows a shipment to be retrieved for the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getShipmentTest() throws ApiException {
        String orderId = null;
        String shipmentId = null;
        CommerceRuntimeShipment response = api.getShipment(orderId, shipmentId);
        // TODO: test validations
    }

    /**
     * Get Taxable Orders
     *
     * Gets an order divided up into \&quot;TaxableOrders\&quot; based on the source and delivery locations of the order items. Generally used for the purpose of splitting it into multiple taxable orders in order to fulfill the order in multiple locations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaxableOrdersTest() throws ApiException {
        String orderId = null;
        List<PricingTaxableOrder> response = api.getTaxableOrders(orderId);
        // TODO: test validations
    }

    /**
     * Get Validation Results
     *
     * Gets list of validation results on an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getValidationResultsTest() throws ApiException {
        String orderId = null;
        List<OrderValidationResult> response = api.getValidationResults(orderId);
        // TODO: test validations
    }

    /**
     * Perform Fulfillment Action
     *
     * Sets the fulfillment action to &#39;Ship&#39;. To ship an order, the order must have a customer name, the &#39;Open&#39; or &#39;OpenAdProcessing&#39; status, full shipping address, and shipping method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performFulfillmentActionTest() throws ApiException {
        String orderId = null;
        FulfillmentAction fulfillmentAction = null;
        Order response = api.performFulfillmentAction(orderId, fulfillmentAction);
        // TODO: test validations
    }

    /**
     * Perform Order Action
     *
     * Set an action on the order. Available actions depend on the current status of the order. If in doubt, get a list of available order actions first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performOrderActionTest() throws ApiException {
        String orderId = null;
        OrderAction orderAction = null;
        Order response = api.performOrderAction(orderId, orderAction);
        // TODO: test validations
    }

    /**
     * Perform Payment Action
     *
     * Performs a specific payment action. Available actions depend on the current status of the payment transaction.   If in doubt, get a list of available payment actions first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performPaymentActionTest() throws ApiException {
        String orderId = null;
        String paymentId = null;
        PaymentAction paymentAction = null;
        Order response = api.performPaymentAction(orderId, paymentId, paymentAction);
        // TODO: test validations
    }

    /**
     * Price Order
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void priceOrderTest() throws ApiException {
        Boolean refreshShipping = null;
        Order order = null;
        Order response = api.priceOrder(refreshShipping, order);
        // TODO: test validations
    }

    /**
     * Process Digital Wallet
     *
     * Process digital wallet (used to hold 3rd party payment and shipping information) on the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processDigitalWalletTest() throws ApiException {
        String orderId = null;
        String digitalWalletType = null;
        DigitalWallet digitalWallet = null;
        Order response = api.processDigitalWallet(orderId, digitalWalletType, digitalWallet);
        // TODO: test validations
    }

    /**
     * Remove Adjustment
     *
     * Removes an adjustment that had been previously applied to the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAdjustmentTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        Order response = api.removeAdjustment(orderId, updateMode, version);
        // TODO: test validations
    }

    /**
     * Endpoint to remove alternate conatact from order and shipments.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAlternateContactTest() throws ApiException {
        String orderId = null;
        Order response = api.removeAlternateContact(orderId);
        // TODO: test validations
    }

    /**
     * Remove Coupon
     *
     * Removes a coupon that had been previously applied to the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCouponTest() throws ApiException {
        String orderId = null;
        String couponCode = null;
        String updateMode = null;
        String version = null;
        Order response = api.removeCoupon(orderId, couponCode, updateMode, version);
        // TODO: test validations
    }

    /**
     * Remove Coupons
     *
     * Removes all coupons that had been previously applied to the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCouponsTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        Order response = api.removeCoupons(orderId, updateMode, version);
        // TODO: test validations
    }

    /**
     * Remove Handling Adjustment
     *
     * Removes a coupon that had been previously applied to the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeHandlingAdjustmentTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        Order response = api.removeHandlingAdjustment(orderId, updateMode, version);
        // TODO: test validations
    }

    /**
     * Remove Shipping Adjustment
     *
     * Removes an adjustment that had been previously applied to the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeShippingAdjustmentTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        Order response = api.removeShippingAdjustment(orderId, updateMode, version);
        // TODO: test validations
    }

    /**
     * Reprice Shipment
     *
     * Allows a shipment to be repriced.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repriceShipmentTest() throws ApiException {
        Integer shipmentNumber = null;
        String orderId = null;
        RepriceShipmentObject repriceShipmentObject = null;
        CommerceRuntimeShipment response = api.repriceShipment(shipmentNumber, orderId, repriceShipmentObject);
        // TODO: test validations
    }

    /**
     * Resend Gateway Gift Card Email
     *
     * Resend gateway giftcard email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendGatewayGiftCardEmailTest() throws ApiException {
        String orderId = null;
        String giftcardId = null;
        api.resendGatewayGiftCardEmail(orderId, giftcardId);
        // TODO: test validations
    }

    /**
     * Resend Order Confirmation Email
     *
     * Resend order confirmation email specified by the order Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendOrderConfirmationEmailTest() throws ApiException {
        String orderId = null;
        OrderAction orderAction = null;
        api.resendOrderConfirmationEmail(orderId, orderAction);
        // TODO: test validations
    }

    /**
     * Resend Package Fulfillment Email
     *
     * Resends the package fulfillment email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendPackageFulfillmentEmailTest() throws ApiException {
        String orderId = null;
        FulfillmentAction fulfillmentAction = null;
        Order response = api.resendPackageFulfillmentEmail(orderId, fulfillmentAction);
        // TODO: test validations
    }

    /**
     * Resend Refund Email
     *
     * Resend refund email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendRefundEmailTest() throws ApiException {
        String orderId = null;
        String refundId = null;
        api.resendRefundEmail(orderId, refundId);
        // TODO: test validations
    }

    /**
     * Set Billing Info
     *
     * Adds a payment source to the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setBillingInfoTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        BillingInfo billingInfo = null;
        BillingInfo response = api.setBillingInfo(orderId, updateMode, version, billingInfo);
        // TODO: test validations
    }

    /**
     * Set Fulfillment Info
     *
     * Modifies an order&#39;s fulfillment information. For example, to update the fulfillment address, estimated delivery date, or the merchant&#39;s fulfillment cost.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setFulFillmentInfoTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        FulfillmentInfo fulfillmentInfo = null;
        FulfillmentInfo response = api.setFulFillmentInfo(orderId, updateMode, version, fulfillmentInfo);
        // TODO: test validations
    }

    /**
     * Sms Opt Out
     *
     * Opting out from the sms notifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void smsOptOutTest() throws ApiException {
        String siteId = null;
        api.smsOptOut(siteId);
        // TODO: test validations
    }

    /**
     * Split Shipments
     *
     * Allows spliting an existing shipment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void splitShipmentsTest() throws ApiException {
        String orderId = null;
        String shipmentNumber = null;
        SplitShipmentsObject splitShipmentsObject = null;
        List<CommerceRuntimeShipment> response = api.splitShipments(orderId, shipmentNumber, splitShipmentsObject);
        // TODO: test validations
    }

    /**
     * Update Digital Package
     *
     * Updates a digital package on the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDigitalPackageTest() throws ApiException {
        String orderId = null;
        String digitalPackageId = null;
        DigitalPackage digitalPackage = null;
        DigitalPackage response = api.updateDigitalPackage(orderId, digitalPackageId, digitalPackage);
        // TODO: test validations
    }

    /**
     * Updated extended properties
     *
     * Update extended properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExtendedPropertiesTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        Boolean upsert = null;
        List<ExtendedProperty> extendedProperty = null;
        List<ExtendedProperty> response = api.updateExtendedProperties(orderId, updateMode, version, upsert, extendedProperty);
        // TODO: test validations
    }

    /**
     * Update Extended Property
     *
     * Updated specific extended property
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExtendedPropertyTest() throws ApiException {
        String orderId = null;
        String key = null;
        String updateMode = null;
        String version = null;
        Boolean upsert = null;
        ExtendedProperty extendedProperty = null;
        ExtendedProperty response = api.updateExtendedProperty(orderId, key, updateMode, version, upsert, extendedProperty);
        // TODO: test validations
    }

    /**
     * Updates the Delivery Date of a particular Order Item
     *
     * Updates the Delivery Date of a particular Order Item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemDeliveryDateTest() throws ApiException {
        String orderId = null;
        String orderItemId = null;
        String updateMode = null;
        String version = null;
        OffsetDateTime body = null;
        Order response = api.updateItemDeliveryDate(orderId, orderItemId, updateMode, version, body);
        // TODO: test validations
    }

    /**
     * Update Item Duty
     *
     * Updates the duty amount of an order item in the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemDutyTest() throws ApiException {
        String orderId = null;
        String orderItemId = null;
        Double dutyAmount = null;
        String updateMode = null;
        String version = null;
        Order response = api.updateItemDuty(orderId, orderItemId, dutyAmount, updateMode, version);
        // TODO: test validations
    }

    /**
     * Update Item Fulfillment
     *
     * Updates the fullfillment method and/or location of an individual order item in the order of the current shopper.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemFulfillmentTest() throws ApiException {
        String orderId = null;
        String orderItemId = null;
        String updateMode = null;
        String version = null;
        String zipCode = null;
        CommerceRuntimeOrderItem commerceRuntimeOrderItem = null;
        Order response = api.updateItemFulfillment(orderId, orderItemId, updateMode, version, zipCode, commerceRuntimeOrderItem);
        // TODO: test validations
    }

    /**
     * Update Item Product Price
     *
     * Updates the price of an individual order item in the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemProductPriceTest() throws ApiException {
        String orderId = null;
        String orderItemId = null;
        Double price = null;
        String updateMode = null;
        String version = null;
        Order response = api.updateItemProductPrice(orderId, orderItemId, price, updateMode, version);
        // TODO: test validations
    }

    /**
     * Update Item Quantity
     *
     * Updates the quantity of an individual order item in the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemQuantityTest() throws ApiException {
        String orderId = null;
        String orderItemId = null;
        Integer quantity = null;
        String updateMode = null;
        String version = null;
        Order response = api.updateItemQuantity(orderId, orderItemId, quantity, updateMode, version);
        // TODO: test validations
    }

    /**
     * Update Order
     *
     * Updates the billing and/or shipping information of an existing order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderTest() throws ApiException {
        String orderId = null;
        String updateMode = null;
        String version = null;
        Order order = null;
        Order response = api.updateOrder(orderId, updateMode, version, order);
        // TODO: test validations
    }

    /**
     * Update Order Attributes
     *
     * Updates a specific order attribute set of an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderAttributesTest() throws ApiException {
        String orderId = null;
        Boolean removeMissing = null;
        List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute = null;
        List<CommerceRuntimeOrderAttribute> response = api.updateOrderAttributes(orderId, removeMissing, commerceRuntimeOrderAttribute);
        // TODO: test validations
    }

    /**
     * Update Order Discount
     *
     * Update existing discount on the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderDiscountTest() throws ApiException {
        String orderId = null;
        Integer discountId = null;
        String updateMode = null;
        String version = null;
        CommerceRuntimeAppliedDiscount commerceRuntimeAppliedDiscount = null;
        Order response = api.updateOrderDiscount(orderId, discountId, updateMode, version, commerceRuntimeAppliedDiscount);
        // TODO: test validations
    }

    /**
     * Update Order Item Discount
     *
     * Update a discount on the order item to ignore or unignore it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderItemDiscountTest() throws ApiException {
        String orderId = null;
        String orderItemId = null;
        Integer discountId = null;
        String updateMode = null;
        String version = null;
        CommerceRuntimeAppliedDiscount commerceRuntimeAppliedDiscount = null;
        Order response = api.updateOrderItemDiscount(orderId, orderItemId, discountId, updateMode, version, commerceRuntimeAppliedDiscount);
        // TODO: test validations
    }

    /**
     * Update Order Note
     *
     * Updates a specific order note for an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderNoteTest() throws ApiException {
        String orderId = null;
        String noteId = null;
        OrderNote orderNote = null;
        OrderNote response = api.updateOrderNote(orderId, noteId, orderNote);
        // TODO: test validations
    }

    /**
     * Update Order Restrictions
     *
     * Update Order Restrictions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderRestrictionsTest() throws ApiException {
        String orderId = null;
        Boolean restrictEdit = null;
        Boolean restrictCancellation = null;
        Order response = api.updateOrderRestrictions(orderId, restrictEdit, restrictCancellation);
        // TODO: test validations
    }

    /**
     * Delete an order package
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePackageTest() throws ApiException {
        String orderId = null;
        String packageId = null;
        CommerceRuntimePackage commerceRuntimePackage = null;
        CommerceRuntimePackage response = api.updatePackage(orderId, packageId, commerceRuntimePackage);
        // TODO: test validations
    }

    /**
     * Update Pickup
     *
     * Updates pickup details on the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePickupTest() throws ApiException {
        String orderId = null;
        String pickupId = null;
        Pickup pickup = null;
        Pickup response = api.updatePickup(orderId, pickupId, pickup);
        // TODO: test validations
    }

    /**
     * Update Shipment Adjustments
     *
     * Updates adjustments on shipments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateShipmentAdjustmentsTest() throws ApiException {
        String orderId = null;
        Integer shipmentNumber = null;
        ShipmentAdjustment shipmentAdjustment = null;
        CommerceRuntimeShipment response = api.updateShipmentAdjustments(orderId, shipmentNumber, shipmentAdjustment);
        // TODO: test validations
    }

    /**
     * Update Shipment Item
     *
     * Updates shipment item with new shipment adjustment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateShipmentItemTest() throws ApiException {
        String orderId = null;
        Integer shipmentNumber = null;
        Integer itemId = null;
        ShipmentItemAdjustment shipmentItemAdjustment = null;
        CommerceRuntimeShipment response = api.updateShipmentItem(orderId, shipmentNumber, itemId, shipmentItemAdjustment);
        // TODO: test validations
    }

    /**
     * Update Order Item Subscription Info, applies only to Draft Order
     *
     * Update a subscription info on the order item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionInfoTest() throws ApiException {
        String orderId = null;
        String orderItemId = null;
        SubscriptionInfo subscriptionInfo = null;
        Order response = api.updateSubscriptionInfo(orderId, orderItemId, subscriptionInfo);
        // TODO: test validations
    }

    /**
     * Endpoint to add/update alternate contact
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertAlternateContactTest() throws ApiException {
        String orderId = null;
        AlternateContact alternateContact = null;
        Order response = api.upsertAlternateContact(orderId, alternateContact);
        // TODO: test validations
    }

    /**
     * Upsert Inventory Tags on OrderItem
     *
     * You need to pass in all tags everytime
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertInventoryTagsTest() throws ApiException {
        String orderId = null;
        String orderItemId = null;
        String updateMode = null;
        String version = null;
        List<InventoryTags> inventoryTags = null;
        Order response = api.upsertInventoryTags(orderId, orderItemId, updateMode, version, inventoryTags);
        // TODO: test validations
    }

}
