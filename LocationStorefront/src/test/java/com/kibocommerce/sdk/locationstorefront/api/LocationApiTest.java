/*
 * Kibo Location Storefront Service
 * OpenAPI Spec for Kibo Location Storefront Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.locationstorefront.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.locationstorefront.models.Location;
import com.kibocommerce.sdk.locationstorefront.models.LocationCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LocationApi
 */
@Disabled
public class LocationApiTest {

    private final LocationApi api = new LocationApi();

    /**
     * Get Curbside Location
     *
     * Get the Curbside Location for the Site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurbsideLocationTest() throws ApiException {
        Boolean includeAttributeDefinition = null;
        Location response = api.getCurbsideLocation(includeAttributeDefinition);
        // TODO: test validations
    }

    /**
     * Get Delivery Location
     *
     * Gets a specific Delivery Location for the site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeliveryLocationTest() throws ApiException {
        Boolean includeAttributeDefinition = null;
        Location response = api.getDeliveryLocation(includeAttributeDefinition);
        // TODO: test validations
    }

    /**
     * Get Delivery Locations
     *
     * Gets the delivery Locations for the site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeliveryLocationsTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        Boolean includeAttributeDefinition = null;
        LocationCollection response = api.getDeliveryLocations(startIndex, pageSize, sortBy, filter, includeAttributeDefinition);
        // TODO: test validations
    }

    /**
     * Get Direct Ship Location
     *
     * Get the Direct Ship Location for the Site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDirectShipLocationTest() throws ApiException {
        Boolean includeAttributeDefinition = null;
        Location response = api.getDirectShipLocation(includeAttributeDefinition);
        // TODO: test validations
    }

    /**
     * Get In Store Pickup Location
     *
     * Get a specific in store pickup Location for the Site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInStorePickupLocationTest() throws ApiException {
        String locationCode = null;
        Boolean includeAttributeDefinition = null;
        Location response = api.getInStorePickupLocation(locationCode, includeAttributeDefinition);
        // TODO: test validations
    }

    /**
     * Get In Store Pickup Locations
     *
     * Gets the in store pickup Locations for the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInStorePickupLocationsTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        Boolean includeAttributeDefinition = null;
        LocationCollection response = api.getInStorePickupLocations(startIndex, pageSize, sortBy, filter, includeAttributeDefinition);
        // TODO: test validations
    }

    /**
     * Get Location
     *
     * Get a Location by locationCode.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationTest() throws ApiException {
        String locationCode = null;
        Boolean includeAttributeDefinition = null;
        Location response = api.getLocation(locationCode, includeAttributeDefinition);
        // TODO: test validations
    }

    /**
     * Get Locations In Usage Type
     *
     * Get the Locations for the Site associated with the locationUsageType.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocationsInUsageTypeTest() throws ApiException {
        String locationUsageType = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        Boolean includeAttributeDefinition = null;
        LocationCollection response = api.getLocationsInUsageType(locationUsageType, startIndex, pageSize, sortBy, filter, includeAttributeDefinition);
        // TODO: test validations
    }

}
