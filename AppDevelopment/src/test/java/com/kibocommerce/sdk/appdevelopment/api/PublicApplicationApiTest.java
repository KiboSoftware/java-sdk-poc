/*
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.appdevelopment.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.appdevelopment.models.ApplicationVersionsCollection;
import com.kibocommerce.sdk.appdevelopment.models.FileMetadata;
import com.kibocommerce.sdk.appdevelopment.models.FolderMetadata;
import com.kibocommerce.sdk.appdevelopment.models.PackageNamesCollection;
import com.kibocommerce.sdk.appdevelopment.models.RenameInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PublicApplicationApi
 */
@Disabled
public class PublicApplicationApiTest {

    private final PublicApplicationApi api = new PublicApplicationApi();

    /**
     * Delete Package File
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePackageFileTest() throws ApiException {
        String applicationKey = null;
        String filepath = null;
        api.deletePackageFile(applicationKey, filepath);
        // TODO: test validations
    }

    /**
     * Get App Package Names
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppPackageNamesTest() throws ApiException {
        String applicationKey = null;
        PackageNamesCollection response = api.getAppPackageNames(applicationKey);
        // TODO: test validations
    }

    /**
     * Get App Versions
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppVersionsTest() throws ApiException {
        String nsAndAppId = null;
        ApplicationVersionsCollection response = api.getAppVersions(nsAndAppId);
        // TODO: test validations
    }

    /**
     * Get Package File Metadata
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackageFileMetadataTest() throws ApiException {
        String applicationKey = null;
        String filepath = null;
        FileMetadata response = api.getPackageFileMetadata(applicationKey, filepath);
        // TODO: test validations
    }

    /**
     * Get Package Metadata
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackageMetadataTest() throws ApiException {
        String applicationKey = null;
        FolderMetadata response = api.getPackageMetadata(applicationKey);
        // TODO: test validations
    }

    /**
     * Rename Package File
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renamePackageFileTest() throws ApiException {
        String applicationKey = null;
        RenameInfo renameInfo = null;
        FileMetadata response = api.renamePackageFile(applicationKey, renameInfo);
        // TODO: test validations
    }

    /**
     * Upsert Package File
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertPackageFileTest() throws ApiException {
        String applicationKey = null;
        String filepath = null;
        String lastModifiedTime = null;
        FileMetadata response = api.upsertPackageFile(applicationKey, filepath, lastModifiedTime);
        // TODO: test validations
    }

}
