/*
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.appdevelopment.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.appdevelopment.models.AppDevPackage;
import com.kibocommerce.sdk.appdevelopment.models.ApplicationSummary;
import com.kibocommerce.sdk.appdevelopment.models.ApplicationSummaryCollection;
import com.kibocommerce.sdk.appdevelopment.models.PackageCollection;
import com.kibocommerce.sdk.appdevelopment.models.PackageRequest;
import com.kibocommerce.sdk.appdevelopment.models.PackageSummaryCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PackageApi
 */
@Disabled
public class PackageApiTest {

    private final PackageApi api = new PackageApi();

    /**
     * Clone Package
     *
     * Use this operation to clone an existing package.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clonePackageTest() throws ApiException {
        String applicationKey = null;
        String packageName = null;
        AppDevPackage response = api.clonePackage(applicationKey, packageName);
        // TODO: test validations
    }

    /**
     * Create New Core Package
     *
     * Save as new version of the application core with only a release package included.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewCorePackageTest() throws ApiException {
        PackageRequest packageRequest = null;
        AppDevPackage response = api.createNewCorePackage(packageRequest);
        // TODO: test validations
    }

    /**
     * Create Package
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPackageTest() throws ApiException {
        Integer projectId = null;
        AppDevPackage appDevPackage = null;
        AppDevPackage response = api.createPackage(projectId, appDevPackage);
        // TODO: test validations
    }

    /**
     * Delete Package
     *
     * Use thi operatin to logically delete a package.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePackageTest() throws ApiException {
        String applicationKey = null;
        api.deletePackage(applicationKey);
        // TODO: test validations
    }

    /**
     * Get All Packages
     *
     * Get all packages for a given Developer Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPackagesTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        PackageSummaryCollection response = api.getAllPackages(startIndex, pageSize, sortBy, filter);
        // TODO: test validations
    }

    /**
     * Get Application Summary Children
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationSummaryChildrenTest() throws ApiException {
        String appId = null;
        List<ApplicationSummary> response = api.getApplicationSummaryChildren(appId);
        // TODO: test validations
    }

    /**
     * Get Application Summary Parents
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationSummaryParentsTest() throws ApiException {
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        ApplicationSummaryCollection response = api.getApplicationSummaryParents(startIndex, pageSize, sortBy, filter);
        // TODO: test validations
    }

    /**
     * Get Package
     *
     * Use this operation to retrieve the package for the requested  package and its associated application core information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackageTest() throws ApiException {
        String applicationKey = null;
        Boolean includeChildren = null;
        Boolean skipDevAccountCheck = null;
        AppDevPackage response = api.getPackage(applicationKey, includeChildren, skipDevAccountCheck);
        // TODO: test validations
    }

    /**
     * Get Packages
     *
     * Use this operation to retieve all packages for a given applicationKey.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackagesTest() throws ApiException {
        String applicationKey = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        PackageCollection response = api.getPackages(applicationKey, startIndex, pageSize, sortBy, filter);
        // TODO: test validations
    }

    /**
     * Update Package
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePackageTest() throws ApiException {
        String applicationKey = null;
        AppDevPackage appDevPackage = null;
        AppDevPackage response = api.updatePackage(applicationKey, appDevPackage);
        // TODO: test validations
    }

}
