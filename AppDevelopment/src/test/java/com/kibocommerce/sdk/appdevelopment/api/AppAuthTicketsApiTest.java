/*
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.appdevelopment.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.appdevelopment.models.AppAuthInfo;
import com.kibocommerce.sdk.appdevelopment.models.AuthTicket;
import com.kibocommerce.sdk.appdevelopment.models.AuthTicketRequest;
import com.kibocommerce.sdk.appdevelopment.models.OAuthAccessTokenResponse;
import com.kibocommerce.sdk.appdevelopment.models.OauthAuthRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppAuthTicketsApi
 */
@Disabled
public class AppAuthTicketsApiTest {

    private final AppAuthTicketsApi api = new AppAuthTicketsApi();

    /**
     * App Authenticate
     *
     * Authenticates an application using shared secret and application id. The method returns a set of authentication tokens used to manage application authentication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authenticateAppTest() throws ApiException {
        AppAuthInfo appAuthInfo = null;
        AuthTicket response = api.authenticateApp(appAuthInfo);
        // TODO: test validations
    }

    /**
     * Delete App Auth Ticket
     *
     * This method is used to expire an application&#39;s current refresh token which   will force the application to reauthenticate once the current access token expires.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppAuthTicketTest() throws ApiException {
        String refreshToken = null;
        api.deleteAppAuthTicket(refreshToken);
        // TODO: test validations
    }

    /**
     * Oauth Authenticate App
     *
     * Oauth Authenticate App
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauthAuthenticateAppTest() throws ApiException {
        OauthAuthRequest oauthAuthRequest = null;
        OAuthAccessTokenResponse response = api.oauthAuthenticateApp(oauthAuthRequest);
        // TODO: test validations
    }

    /**
     * Refresh App Auth Ticket
     *
     * Returns the AppAuthTicket with a refreshed AccessToken
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshAppAuthTicketTest() throws ApiException {
        AuthTicketRequest authTicketRequest = null;
        AuthTicket response = api.refreshAppAuthTicket(authTicketRequest);
        // TODO: test validations
    }

}
