/*
 * Kibo MZDB Service
 * OpenAPI Spec for Kibo MZDB Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.entities.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.entities.models.AppDevHttpRequestMessage;
import com.kibocommerce.sdk.entities.models.EntityCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EntitiesApi
 */
@Disabled
public class EntitiesApiTest {

    private final EntitiesApi api = new EntitiesApi();

    /**
     * Delete Entity
     *
     * Delete an existing Entity from an EntityList instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEntityTest() throws ApiException {
        String entityListFullName = null;
        String id = null;
        api.deleteEntity(entityListFullName, id);
        // TODO: test validations
    }

    /**
     * Get Entities
     *
     * Get a filtered collection of Entities from an EntityList instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEntitiesTest() throws ApiException {
        String entityListFullName = null;
        Integer pageSize = null;
        Integer startIndex = null;
        String filter = null;
        String sortBy = null;
        EntityCollection response = api.getEntities(entityListFullName, pageSize, startIndex, filter, sortBy);
        // TODO: test validations
    }

    /**
     * Get Entity
     *
     * Get a specific Entity from an EntityList instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEntityTest() throws ApiException {
        String entityListFullName = null;
        String id = null;
        Object response = api.getEntity(entityListFullName, id);
        // TODO: test validations
    }

    /**
     * Get View Entities
     *
     * Get a filtered collection of Entities for a ListView on an EntityList
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getViewEntitiesTest() throws ApiException {
        String entityListFullName = null;
        String viewName = null;
        Integer pageSize = null;
        Integer startIndex = null;
        String filter = null;
        EntityCollection response = api.getViewEntities(entityListFullName, viewName, pageSize, startIndex, filter);
        // TODO: test validations
    }

    /**
     * Get View Entity
     *
     * Get a specific Entity in a ListView on an EntityList
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getViewEntityTest() throws ApiException {
        String entityListFullName = null;
        String viewName = null;
        String entityId = null;
        Object response = api.getViewEntity(entityListFullName, viewName, entityId);
        // TODO: test validations
    }

    /**
     * Add Entity
     *
     * Insert an Entity into an EntityList instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void insertEntityTest() throws ApiException {
        String entityListFullName = null;
        AppDevHttpRequestMessage appDevHttpRequestMessage = null;
        Object response = api.insertEntity(entityListFullName, appDevHttpRequestMessage);
        // TODO: test validations
    }

    /**
     * Update Entity
     *
     * Update an existing Entity in an EntityList instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEntityTest() throws ApiException {
        String entityListFullName = null;
        String id = null;
        AppDevHttpRequestMessage appDevHttpRequestMessage = null;
        Object response = api.updateEntity(entityListFullName, id, appDevHttpRequestMessage);
        // TODO: test validations
    }

}
