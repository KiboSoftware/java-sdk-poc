/*
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.fulfillment.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.fulfillment.models.EntityModelOfContact;
import com.kibocommerce.sdk.fulfillment.models.UpdateContactRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ShipmentContactApi
 */
@Disabled
public class ShipmentContactApiTest {

    private final ShipmentContactApi api = new ShipmentContactApi();

    /**
     * Delete Alternate Contact
     *
     * Delete Alternate Contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAlternateContactUsingDELETETest() throws ApiException {
        Integer shipmentNumber = null;
        String ifMatch = null;
        api.deleteAlternateContactUsingDELETE(shipmentNumber, ifMatch);
        // TODO: test validations
    }

    /**
     * Get Alternate Contact
     *
     * Get Alternate Contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlternateContactUsingGETTest() throws ApiException {
        Integer shipmentNumber = null;
        EntityModelOfContact response = api.getAlternateContactUsingGET(shipmentNumber);
        // TODO: test validations
    }

    /**
     * Get Customer Contact
     *
     * Get Customer Contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerContactUsingGETTest() throws ApiException {
        Integer shipmentNumber = null;
        EntityModelOfContact response = api.getCustomerContactUsingGET(shipmentNumber);
        // TODO: test validations
    }

    /**
     * Get Destination Contact
     *
     * Get Destination Contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDestinationContactUsingGETTest() throws ApiException {
        Integer shipmentNumber = null;
        EntityModelOfContact response = api.getDestinationContactUsingGET(shipmentNumber);
        // TODO: test validations
    }

    /**
     * Update Alternate Contact
     *
     * Update Alternate Contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAlternateContactUsingPUTTest() throws ApiException {
        Integer shipmentNumber = null;
        String ifMatch = null;
        UpdateContactRequest updateContactRequest = null;
        EntityModelOfContact response = api.updateAlternateContactUsingPUT(shipmentNumber, ifMatch, updateContactRequest);
        // TODO: test validations
    }

    /**
     * Update Customer Contact
     *
     * Update Customer Contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomerContactUsingPUTTest() throws ApiException {
        Integer shipmentNumber = null;
        String ifMatch = null;
        UpdateContactRequest updateContactRequest = null;
        EntityModelOfContact response = api.updateCustomerContactUsingPUT(shipmentNumber, ifMatch, updateContactRequest);
        // TODO: test validations
    }

    /**
     * Update Destination Contact
     *
     * Update Destination Contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDestinationContactUsingPUTTest() throws ApiException {
        Integer shipmentNumber = null;
        String ifMatch = null;
        UpdateContactRequest updateContactRequest = null;
        EntityModelOfContact response = api.updateDestinationContactUsingPUT(shipmentNumber, ifMatch, updateContactRequest);
        // TODO: test validations
    }

}
