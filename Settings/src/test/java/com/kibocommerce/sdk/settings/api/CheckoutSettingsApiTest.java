/*
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.settings.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.settings.models.CheckoutSettings;
import com.kibocommerce.sdk.settings.models.CustomerCheckoutSettings;
import com.kibocommerce.sdk.settings.models.ExternalPaymentWorkflowDefinition;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CheckoutSettingsApi
 */
@Disabled
public class CheckoutSettingsApiTest {

    private final CheckoutSettingsApi api = new CheckoutSettingsApi();

    /**
     * Add Third Party Payment Workflow
     *
     * Adds a third party payment workflow definition in the context of a site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addThirdPartyPaymentWorkflowTest() throws ApiException {
        ExternalPaymentWorkflowDefinition externalPaymentWorkflowDefinition = null;
        api.addThirdPartyPaymentWorkflow(externalPaymentWorkflowDefinition);
        // TODO: test validations
    }

    /**
     * Delete Third Party Payment Workflow
     *
     * Deletes a third party payment workflow definition defined for the site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteThirdPartyPaymentWorkflowTest() throws ApiException {
        String fullyQualifiedName = null;
        api.deleteThirdPartyPaymentWorkflow(fullyQualifiedName);
        // TODO: test validations
    }

    /**
     * Get Checkout Settings
     *
     * Retrieves all checkout settings defined for the site: Payment settings, such as the payment gateway ID and credentials,   supported credit cards, and more; Customer Checkout settings, such as whether login is required, and any   custom attributes; and Order Processing settings, such as when payment is authorized and captured, and any custom attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCheckoutSettingsTest() throws ApiException {
        CheckoutSettings response = api.getCheckoutSettings();
        // TODO: test validations
    }

    /**
     * Get Customer Checkout Settings
     *
     * Retrieves existing customer checkout settings including the checkout type, which determines whether the   customer must be logged in when placing an order. Also lists any custom customer checkout attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerCheckoutSettingsTest() throws ApiException {
        CustomerCheckoutSettings response = api.getCustomerCheckoutSettings();
        // TODO: test validations
    }

    /**
     * Get Third Party Payment Workflow With Values
     *
     * Gets a third party payment workflow specified by workflow definition which includes credential values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThirdPartyPaymentWorkflowWithValuesTest() throws ApiException {
        String fullyQualifiedName = null;
        ExternalPaymentWorkflowDefinition response = api.getThirdPartyPaymentWorkflowWithValues(fullyQualifiedName);
        // TODO: test validations
    }

    /**
     * Get Third Party Payment Workflows
     *
     * Retrieves list of external payment workflow definitions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThirdPartyPaymentWorkflowsTest() throws ApiException {
        List<ExternalPaymentWorkflowDefinition> response = api.getThirdPartyPaymentWorkflows();
        // TODO: test validations
    }

    /**
     * Update Customer Checkout Settings
     *
     * Modifies existing customer checkout settings. When a shopper starts the process of checking out,   the Checkout Service checks these settings to render the checkout page.   This is where you can specify whether shoppers must be logged in \&quot;LoginRequired\&quot;  or not \&quot;LoginOptional\&quot; to checkout. You can also update your own customer checkout requirements, for example, to add a tracking code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomerCheckoutSettingsTest() throws ApiException {
        CustomerCheckoutSettings customerCheckoutSettings = null;
        CustomerCheckoutSettings response = api.updateCustomerCheckoutSettings(customerCheckoutSettings);
        // TODO: test validations
    }

}
