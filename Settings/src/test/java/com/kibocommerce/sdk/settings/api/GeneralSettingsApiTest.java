/*
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.settings.api;

import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.settings.models.CustomRouteSettings;
import com.kibocommerce.sdk.settings.models.GeneralSettings;
import com.kibocommerce.sdk.settings.models.TaxableTerritory;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GeneralSettingsApi
 */
@Disabled
public class GeneralSettingsApiTest {

    private final GeneralSettingsApi api = new GeneralSettingsApi();

    /**
     * Adds Taxable Territory
     *
     * Creates taxble territories for the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTaxableTerritoryTest() throws ApiException {
        TaxableTerritory taxableTerritory = null;
        TaxableTerritory response = api.addTaxableTerritory(taxableTerritory);
        // TODO: test validations
    }

    /**
     * Create Custom Route Settings
     *
     * Creates Custom Route Settings on a tenant which includes routes, validators and mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomRouteSettingsTest() throws ApiException {
        CustomRouteSettings customRouteSettings = null;
        CustomRouteSettings response = api.createCustomRouteSettings(customRouteSettings);
        // TODO: test validations
    }

    /**
     * Delete Custom Route Settings
     *
     * Deletes all existing custom route settings defined on the tenant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomRouteSettingsTest() throws ApiException {
        api.deleteCustomRouteSettings();
        // TODO: test validations
    }

    /**
     * Get Custom Route Settings
     *
     * Retrieves Custom Route Settings on a tenant which includes routes, validators and mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomRouteSettingsTest() throws ApiException {
        CustomRouteSettings response = api.getCustomRouteSettings();
        // TODO: test validations
    }

    /**
     * Get General Settings
     *
     * Retrieves list of general settings for the site, which includes settings like theme, email, address validation etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneralSettingsTest() throws ApiException {
        GeneralSettings response = api.getGeneralSettings();
        // TODO: test validations
    }

    /**
     * Get Taxable Territories
     *
     * Retrieves list of taxble territories for the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaxableTerritoriesTest() throws ApiException {
        List<TaxableTerritory> response = api.getTaxableTerritories();
        // TODO: test validations
    }

    /**
     * Update Custom Route Settings
     *
     * Updates existing custom route settings defined on the tenant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomRouteSettingsTest() throws ApiException {
        CustomRouteSettings customRouteSettings = null;
        CustomRouteSettings response = api.updateCustomRouteSettings(customRouteSettings);
        // TODO: test validations
    }

    /**
     * Update General Settings
     *
     * Updates general settings for the site, which includes settings like theme, email, address validation etc
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGeneralSettingsTest() throws ApiException {
        GeneralSettings generalSettings = null;
        GeneralSettings response = api.updateGeneralSettings(generalSettings);
        // TODO: test validations
    }

    /**
     * Update Taxable Territories
     *
     * Updates taxble territories for the site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTaxableTerritoriesTest() throws ApiException {
        List<TaxableTerritory> taxableTerritory = null;
        List<TaxableTerritory> response = api.updateTaxableTerritories(taxableTerritory);
        // TODO: test validations
    }

}
